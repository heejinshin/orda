// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: orda.grpc.proto

package model

import (
	context "context"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PatchMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Collection string `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
	Json       string `protobuf:"bytes,3,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *PatchMessage) Reset() {
	*x = PatchMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orda_grpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchMessage) ProtoMessage() {}

func (x *PatchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_orda_grpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchMessage.ProtoReflect.Descriptor instead.
func (*PatchMessage) Descriptor() ([]byte, []int) {
	return file_orda_grpc_proto_rawDescGZIP(), []int{0}
}

func (x *PatchMessage) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PatchMessage) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *PatchMessage) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

type EncodingMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type TypeOfDatatype `protobuf:"varint,1,opt,name=type,proto3,enum=orda.TypeOfDatatype" json:"type,omitempty"`
	Op   *Operation     `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"`
}

func (x *EncodingMessage) Reset() {
	*x = EncodingMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orda_grpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodingMessage) ProtoMessage() {}

func (x *EncodingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_orda_grpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodingMessage.ProtoReflect.Descriptor instead.
func (*EncodingMessage) Descriptor() ([]byte, []int) {
	return file_orda_grpc_proto_rawDescGZIP(), []int{1}
}

func (x *EncodingMessage) GetType() TypeOfDatatype {
	if x != nil {
		return x.Type
	}
	return TypeOfDatatype_COUNTER
}

func (x *EncodingMessage) GetOp() *Operation {
	if x != nil {
		return x.Op
	}
	return nil
}

var File_orda_grpc_proto protoreflect.FileDescriptor

var file_orda_grpc_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x61, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x6f, 0x72, 0x64, 0x61, 0x1a, 0x0a, 0x6f, 0x72, 0x64, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x6f, 0x72, 0x64, 0x61, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x0c, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x5c,
	0x0a, 0x0f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x6f, 0x72, 0x64, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x74,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x02, 0x6f,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x72, 0x64, 0x61, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6f, 0x70, 0x32, 0xcb, 0x05, 0x0a,
	0x0b, 0x4f, 0x72, 0x64, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7d, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x75, 0x73, 0x68, 0x50, 0x75, 0x6c, 0x6c, 0x12,
	0x15, 0x2e, 0x6f, 0x72, 0x64, 0x61, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x50, 0x75, 0x6c, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x61, 0x2e, 0x50, 0x75,
	0x73, 0x68, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x36, 0x22, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x70, 0x75, 0x73, 0x68, 0x70, 0x75, 0x6c, 0x6c,
	0x73, 0x2f, 0x7b, 0x63, 0x75, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x75, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x2e, 0x6f,
	0x72, 0x64, 0x61, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x61, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x7d,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x75, 0x69, 0x64, 0x7d, 0x3a,
	0x01, 0x2a, 0x12, 0x74, 0x0a, 0x0d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x2e, 0x6f, 0x72, 0x64, 0x61, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x12, 0x2e, 0x6f, 0x72, 0x64, 0x61, 0x2e, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x35, 0x22, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x6b, 0x65, 0x79, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x6e, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x6f,
	0x72, 0x64, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x17, 0x2e, 0x6f, 0x72, 0x64, 0x61, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x28,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x1a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0x73, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x6f, 0x72,
	0x64, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x17, 0x2e, 0x6f, 0x72, 0x64, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x1a, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x6b, 0x0a,
	0x15, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x61, 0x2e, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e,
	0x6f, 0x72, 0x64, 0x61, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x42, 0x2c, 0x5a, 0x09, 0x70, 0x6b,
	0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x92, 0x41, 0x1e, 0x12, 0x1c, 0x0a, 0x16, 0x4f, 0x72,
	0x64, 0x61, 0x20, 0x67, 0x52, 0x50, 0x43, 0x20, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x20,
	0x41, 0x50, 0x49, 0x73, 0x32, 0x02, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_orda_grpc_proto_rawDescOnce sync.Once
	file_orda_grpc_proto_rawDescData = file_orda_grpc_proto_rawDesc
)

func file_orda_grpc_proto_rawDescGZIP() []byte {
	file_orda_grpc_proto_rawDescOnce.Do(func() {
		file_orda_grpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_orda_grpc_proto_rawDescData)
	})
	return file_orda_grpc_proto_rawDescData
}

var file_orda_grpc_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_orda_grpc_proto_goTypes = []interface{}{
	(*PatchMessage)(nil),      // 0: orda.PatchMessage
	(*EncodingMessage)(nil),   // 1: orda.EncodingMessage
	(TypeOfDatatype)(0),       // 2: orda.TypeOfDatatype
	(*Operation)(nil),         // 3: orda.Operation
	(*PushPullMessage)(nil),   // 4: orda.PushPullMessage
	(*ClientMessage)(nil),     // 5: orda.ClientMessage
	(*CollectionMessage)(nil), // 6: orda.CollectionMessage
}
var file_orda_grpc_proto_depIdxs = []int32{
	2, // 0: orda.EncodingMessage.type:type_name -> orda.TypeOfDatatype
	3, // 1: orda.EncodingMessage.op:type_name -> orda.Operation
	4, // 2: orda.OrdaService.ProcessPushPull:input_type -> orda.PushPullMessage
	5, // 3: orda.OrdaService.ProcessClient:input_type -> orda.ClientMessage
	0, // 4: orda.OrdaService.PatchDocument:input_type -> orda.PatchMessage
	6, // 5: orda.OrdaService.CreateCollection:input_type -> orda.CollectionMessage
	6, // 6: orda.OrdaService.ResetCollection:input_type -> orda.CollectionMessage
	1, // 7: orda.OrdaService.TestEncodingOperation:input_type -> orda.EncodingMessage
	4, // 8: orda.OrdaService.ProcessPushPull:output_type -> orda.PushPullMessage
	5, // 9: orda.OrdaService.ProcessClient:output_type -> orda.ClientMessage
	0, // 10: orda.OrdaService.PatchDocument:output_type -> orda.PatchMessage
	6, // 11: orda.OrdaService.CreateCollection:output_type -> orda.CollectionMessage
	6, // 12: orda.OrdaService.ResetCollection:output_type -> orda.CollectionMessage
	1, // 13: orda.OrdaService.TestEncodingOperation:output_type -> orda.EncodingMessage
	8, // [8:14] is the sub-list for method output_type
	2, // [2:8] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_orda_grpc_proto_init() }
func file_orda_grpc_proto_init() {
	if File_orda_grpc_proto != nil {
		return
	}
	file_orda_proto_init()
	file_orda_enum_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_orda_grpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orda_grpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodingMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_orda_grpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_orda_grpc_proto_goTypes,
		DependencyIndexes: file_orda_grpc_proto_depIdxs,
		MessageInfos:      file_orda_grpc_proto_msgTypes,
	}.Build()
	File_orda_grpc_proto = out.File
	file_orda_grpc_proto_rawDesc = nil
	file_orda_grpc_proto_goTypes = nil
	file_orda_grpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OrdaServiceClient is the client API for OrdaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrdaServiceClient interface {
	ProcessPushPull(ctx context.Context, in *PushPullMessage, opts ...grpc.CallOption) (*PushPullMessage, error)
	ProcessClient(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (*ClientMessage, error)
	PatchDocument(ctx context.Context, in *PatchMessage, opts ...grpc.CallOption) (*PatchMessage, error)
	CreateCollection(ctx context.Context, in *CollectionMessage, opts ...grpc.CallOption) (*CollectionMessage, error)
	ResetCollection(ctx context.Context, in *CollectionMessage, opts ...grpc.CallOption) (*CollectionMessage, error)
	TestEncodingOperation(ctx context.Context, in *EncodingMessage, opts ...grpc.CallOption) (*EncodingMessage, error)
}

type ordaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdaServiceClient(cc grpc.ClientConnInterface) OrdaServiceClient {
	return &ordaServiceClient{cc}
}

func (c *ordaServiceClient) ProcessPushPull(ctx context.Context, in *PushPullMessage, opts ...grpc.CallOption) (*PushPullMessage, error) {
	out := new(PushPullMessage)
	err := c.cc.Invoke(ctx, "/orda.OrdaService/ProcessPushPull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordaServiceClient) ProcessClient(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (*ClientMessage, error) {
	out := new(ClientMessage)
	err := c.cc.Invoke(ctx, "/orda.OrdaService/ProcessClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordaServiceClient) PatchDocument(ctx context.Context, in *PatchMessage, opts ...grpc.CallOption) (*PatchMessage, error) {
	out := new(PatchMessage)
	err := c.cc.Invoke(ctx, "/orda.OrdaService/PatchDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordaServiceClient) CreateCollection(ctx context.Context, in *CollectionMessage, opts ...grpc.CallOption) (*CollectionMessage, error) {
	out := new(CollectionMessage)
	err := c.cc.Invoke(ctx, "/orda.OrdaService/CreateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordaServiceClient) ResetCollection(ctx context.Context, in *CollectionMessage, opts ...grpc.CallOption) (*CollectionMessage, error) {
	out := new(CollectionMessage)
	err := c.cc.Invoke(ctx, "/orda.OrdaService/ResetCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordaServiceClient) TestEncodingOperation(ctx context.Context, in *EncodingMessage, opts ...grpc.CallOption) (*EncodingMessage, error) {
	out := new(EncodingMessage)
	err := c.cc.Invoke(ctx, "/orda.OrdaService/TestEncodingOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrdaServiceServer is the server API for OrdaService service.
type OrdaServiceServer interface {
	ProcessPushPull(context.Context, *PushPullMessage) (*PushPullMessage, error)
	ProcessClient(context.Context, *ClientMessage) (*ClientMessage, error)
	PatchDocument(context.Context, *PatchMessage) (*PatchMessage, error)
	CreateCollection(context.Context, *CollectionMessage) (*CollectionMessage, error)
	ResetCollection(context.Context, *CollectionMessage) (*CollectionMessage, error)
	TestEncodingOperation(context.Context, *EncodingMessage) (*EncodingMessage, error)
}

// UnimplementedOrdaServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrdaServiceServer struct {
}

func (*UnimplementedOrdaServiceServer) ProcessPushPull(context.Context, *PushPullMessage) (*PushPullMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPushPull not implemented")
}
func (*UnimplementedOrdaServiceServer) ProcessClient(context.Context, *ClientMessage) (*ClientMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessClient not implemented")
}
func (*UnimplementedOrdaServiceServer) PatchDocument(context.Context, *PatchMessage) (*PatchMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDocument not implemented")
}
func (*UnimplementedOrdaServiceServer) CreateCollection(context.Context, *CollectionMessage) (*CollectionMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (*UnimplementedOrdaServiceServer) ResetCollection(context.Context, *CollectionMessage) (*CollectionMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCollection not implemented")
}
func (*UnimplementedOrdaServiceServer) TestEncodingOperation(context.Context, *EncodingMessage) (*EncodingMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestEncodingOperation not implemented")
}

func RegisterOrdaServiceServer(s *grpc.Server, srv OrdaServiceServer) {
	s.RegisterService(&_OrdaService_serviceDesc, srv)
}

func _OrdaService_ProcessPushPull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushPullMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdaServiceServer).ProcessPushPull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orda.OrdaService/ProcessPushPull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdaServiceServer).ProcessPushPull(ctx, req.(*PushPullMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdaService_ProcessClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdaServiceServer).ProcessClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orda.OrdaService/ProcessClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdaServiceServer).ProcessClient(ctx, req.(*ClientMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdaService_PatchDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdaServiceServer).PatchDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orda.OrdaService/PatchDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdaServiceServer).PatchDocument(ctx, req.(*PatchMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdaService_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdaServiceServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orda.OrdaService/CreateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdaServiceServer).CreateCollection(ctx, req.(*CollectionMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdaService_ResetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdaServiceServer).ResetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orda.OrdaService/ResetCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdaServiceServer).ResetCollection(ctx, req.(*CollectionMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdaService_TestEncodingOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdaServiceServer).TestEncodingOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orda.OrdaService/TestEncodingOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdaServiceServer).TestEncodingOperation(ctx, req.(*EncodingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrdaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "orda.OrdaService",
	HandlerType: (*OrdaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessPushPull",
			Handler:    _OrdaService_ProcessPushPull_Handler,
		},
		{
			MethodName: "ProcessClient",
			Handler:    _OrdaService_ProcessClient_Handler,
		},
		{
			MethodName: "PatchDocument",
			Handler:    _OrdaService_PatchDocument_Handler,
		},
		{
			MethodName: "CreateCollection",
			Handler:    _OrdaService_CreateCollection_Handler,
		},
		{
			MethodName: "ResetCollection",
			Handler:    _OrdaService_ResetCollection_Handler,
		},
		{
			MethodName: "TestEncodingOperation",
			Handler:    _OrdaService_TestEncodingOperation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orda.grpc.proto",
}

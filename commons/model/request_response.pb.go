// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: request_response.proto

package model

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TypeOfMessage int32

const (
	TypeOfMessage_REQUEST_CLIENT    TypeOfMessage = 0
	TypeOfMessage_REQUEST_PUSHPULL  TypeOfMessage = 1
	TypeOfMessage_RESPONSE_CLIENT   TypeOfMessage = 10
	TypeOfMessage_RESPONSE_PUSHPULL TypeOfMessage = 11
)

var TypeOfMessage_name = map[int32]string{
	0:  "REQUEST_CLIENT",
	1:  "REQUEST_PUSHPULL",
	10: "RESPONSE_CLIENT",
	11: "RESPONSE_PUSHPULL",
}

var TypeOfMessage_value = map[string]int32{
	"REQUEST_CLIENT":    0,
	"REQUEST_PUSHPULL":  1,
	"RESPONSE_CLIENT":   10,
	"RESPONSE_PUSHPULL": 11,
}

func (x TypeOfMessage) String() string {
	return proto.EnumName(TypeOfMessage_name, int32(x))
}

func (TypeOfMessage) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4636e7fde4e164c9, []int{0}
}

type StateOfResponse int32

const (
	StateOfResponse_OK                            StateOfResponse = 0
	StateOfResponse_ERR_CLIENT_INVALID_COLLECTION StateOfResponse = 101
	StateOfResponse_ERR_CLIENT_INVALID_SYNCTYPE   StateOfResponse = 102
)

var StateOfResponse_name = map[int32]string{
	0:   "OK",
	101: "ERR_CLIENT_INVALID_COLLECTION",
	102: "ERR_CLIENT_INVALID_SYNCTYPE",
}

var StateOfResponse_value = map[string]int32{
	"OK":                            0,
	"ERR_CLIENT_INVALID_COLLECTION": 101,
	"ERR_CLIENT_INVALID_SYNCTYPE":   102,
}

func (x StateOfResponse) String() string {
	return proto.EnumName(StateOfResponse_name, int32(x))
}

func (StateOfResponse) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4636e7fde4e164c9, []int{1}
}

type MessageHeader struct {
	Version              string        `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Seq                  uint32        `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	TypeOf               TypeOfMessage `protobuf:"varint,3,opt,name=typeOf,proto3,enum=model.TypeOfMessage" json:"typeOf,omitempty"`
	Collection           string        `protobuf:"bytes,4,opt,name=collection,proto3" json:"collection,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MessageHeader) Reset()         { *m = MessageHeader{} }
func (m *MessageHeader) String() string { return proto.CompactTextString(m) }
func (*MessageHeader) ProtoMessage()    {}
func (*MessageHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_4636e7fde4e164c9, []int{0}
}
func (m *MessageHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageHeader.Merge(m, src)
}
func (m *MessageHeader) XXX_Size() int {
	return m.Size()
}
func (m *MessageHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageHeader.DiscardUnknown(m)
}

var xxx_messageInfo_MessageHeader proto.InternalMessageInfo

func (m *MessageHeader) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *MessageHeader) GetSeq() uint32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *MessageHeader) GetTypeOf() TypeOfMessage {
	if m != nil {
		return m.TypeOf
	}
	return TypeOfMessage_REQUEST_CLIENT
}

func (m *MessageHeader) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

type ResponseState struct {
	State                StateOfResponse `protobuf:"varint,1,opt,name=state,proto3,enum=model.StateOfResponse" json:"state,omitempty"`
	Msg                  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResponseState) Reset()         { *m = ResponseState{} }
func (m *ResponseState) String() string { return proto.CompactTextString(m) }
func (*ResponseState) ProtoMessage()    {}
func (*ResponseState) Descriptor() ([]byte, []int) {
	return fileDescriptor_4636e7fde4e164c9, []int{1}
}
func (m *ResponseState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseState.Merge(m, src)
}
func (m *ResponseState) XXX_Size() int {
	return m.Size()
}
func (m *ResponseState) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseState.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseState proto.InternalMessageInfo

func (m *ResponseState) GetState() StateOfResponse {
	if m != nil {
		return m.State
	}
	return StateOfResponse_OK
}

func (m *ResponseState) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type ClientRequest struct {
	Header               *MessageHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Client               *Client        `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ClientRequest) Reset()         { *m = ClientRequest{} }
func (m *ClientRequest) String() string { return proto.CompactTextString(m) }
func (*ClientRequest) ProtoMessage()    {}
func (*ClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4636e7fde4e164c9, []int{2}
}
func (m *ClientRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRequest.Merge(m, src)
}
func (m *ClientRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRequest proto.InternalMessageInfo

func (m *ClientRequest) GetHeader() *MessageHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ClientRequest) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

type ClientResponse struct {
	Header               *MessageHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	State                *ResponseState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ClientResponse) Reset()         { *m = ClientResponse{} }
func (m *ClientResponse) String() string { return proto.CompactTextString(m) }
func (*ClientResponse) ProtoMessage()    {}
func (*ClientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4636e7fde4e164c9, []int{3}
}
func (m *ClientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientResponse.Merge(m, src)
}
func (m *ClientResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClientResponse proto.InternalMessageInfo

func (m *ClientResponse) GetHeader() *MessageHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ClientResponse) GetState() *ResponseState {
	if m != nil {
		return m.State
	}
	return nil
}

type PushPullRequest struct {
	Header               *MessageHeader  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Id                   int32           `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	PushPullPacks        []*PushPullPack `protobuf:"bytes,3,rep,name=pushPullPacks,proto3" json:"pushPullPacks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PushPullRequest) Reset()         { *m = PushPullRequest{} }
func (m *PushPullRequest) String() string { return proto.CompactTextString(m) }
func (*PushPullRequest) ProtoMessage()    {}
func (*PushPullRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4636e7fde4e164c9, []int{4}
}
func (m *PushPullRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushPullRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushPullRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushPullRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushPullRequest.Merge(m, src)
}
func (m *PushPullRequest) XXX_Size() int {
	return m.Size()
}
func (m *PushPullRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PushPullRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PushPullRequest proto.InternalMessageInfo

func (m *PushPullRequest) GetHeader() *MessageHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PushPullRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PushPullRequest) GetPushPullPacks() []*PushPullPack {
	if m != nil {
		return m.PushPullPacks
	}
	return nil
}

type PushPullResponse struct {
	Header               *MessageHeader  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Id                   int32           `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	PushPullPacks        []*PushPullPack `protobuf:"bytes,3,rep,name=pushPullPacks,proto3" json:"pushPullPacks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PushPullResponse) Reset()         { *m = PushPullResponse{} }
func (m *PushPullResponse) String() string { return proto.CompactTextString(m) }
func (*PushPullResponse) ProtoMessage()    {}
func (*PushPullResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4636e7fde4e164c9, []int{5}
}
func (m *PushPullResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushPullResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushPullResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushPullResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushPullResponse.Merge(m, src)
}
func (m *PushPullResponse) XXX_Size() int {
	return m.Size()
}
func (m *PushPullResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PushPullResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PushPullResponse proto.InternalMessageInfo

func (m *PushPullResponse) GetHeader() *MessageHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PushPullResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PushPullResponse) GetPushPullPacks() []*PushPullPack {
	if m != nil {
		return m.PushPullPacks
	}
	return nil
}

func init() {
	proto.RegisterEnum("model.TypeOfMessage", TypeOfMessage_name, TypeOfMessage_value)
	proto.RegisterEnum("model.StateOfResponse", StateOfResponse_name, StateOfResponse_value)
	proto.RegisterType((*MessageHeader)(nil), "model.MessageHeader")
	proto.RegisterType((*ResponseState)(nil), "model.ResponseState")
	proto.RegisterType((*ClientRequest)(nil), "model.ClientRequest")
	proto.RegisterType((*ClientResponse)(nil), "model.ClientResponse")
	proto.RegisterType((*PushPullRequest)(nil), "model.PushPullRequest")
	proto.RegisterType((*PushPullResponse)(nil), "model.PushPullResponse")
}

func init() { proto.RegisterFile("request_response.proto", fileDescriptor_4636e7fde4e164c9) }

var fileDescriptor_4636e7fde4e164c9 = []byte{
	// 532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xb3, 0x09, 0x09, 0xea, 0x04, 0x27, 0x66, 0x9b, 0x86, 0xa8, 0x88, 0x10, 0x2c, 0x21,
	0x45, 0x51, 0xd5, 0x43, 0x38, 0x21, 0x71, 0xa1, 0xc1, 0x52, 0x23, 0x8c, 0x6d, 0xd6, 0x0e, 0x52,
	0x0f, 0x28, 0x0a, 0xf6, 0xa4, 0x35, 0xb8, 0x71, 0xea, 0x75, 0x2a, 0xf1, 0x08, 0xc0, 0x85, 0x23,
	0x8f, 0xc4, 0x91, 0x47, 0x40, 0xe1, 0x45, 0x90, 0xd7, 0xeb, 0x50, 0x07, 0x2e, 0x54, 0x3d, 0x65,
	0xf3, 0xef, 0xbf, 0xdf, 0xfc, 0x33, 0x1a, 0x19, 0xda, 0x31, 0x5e, 0xac, 0x90, 0x27, 0xd3, 0x18,
	0xf9, 0x32, 0x5a, 0x70, 0x3c, 0x5c, 0xc6, 0x51, 0x12, 0xd1, 0xea, 0x79, 0xe4, 0x63, 0xb8, 0x5f,
	0x17, 0x3f, 0x99, 0xa6, 0x7d, 0x22, 0xa0, 0xbc, 0x42, 0xce, 0x67, 0xa7, 0x78, 0x8c, 0x33, 0x1f,
	0x63, 0xda, 0x81, 0xdb, 0x97, 0x18, 0xf3, 0x20, 0x5a, 0x74, 0x48, 0x8f, 0xf4, 0x77, 0x58, 0xfe,
	0x97, 0xaa, 0x50, 0xe1, 0x78, 0xd1, 0x29, 0xf7, 0x48, 0x5f, 0x61, 0xe9, 0x91, 0x1e, 0x40, 0x2d,
	0xf9, 0xb8, 0x44, 0x6b, 0xde, 0xa9, 0xf4, 0x48, 0xbf, 0x31, 0x6c, 0x1d, 0x66, 0x6c, 0x57, 0x88,
	0x92, 0xcb, 0xa4, 0x87, 0x76, 0x01, 0xbc, 0x28, 0x0c, 0xd1, 0x4b, 0x52, 0xf8, 0x2d, 0x01, 0xbf,
	0xa2, 0x68, 0x16, 0x28, 0x4c, 0x26, 0x76, 0x92, 0x59, 0x82, 0xf4, 0x00, 0xaa, 0x3c, 0x3d, 0x88,
	0x20, 0x8d, 0x61, 0x5b, 0xd2, 0xc5, 0xa5, 0x35, 0xcf, 0xbd, 0x2c, 0x33, 0xa5, 0xf1, 0xce, 0xf9,
	0xa9, 0x88, 0xb7, 0xc3, 0xd2, 0xa3, 0xe6, 0x83, 0x32, 0x0a, 0x03, 0x5c, 0x24, 0x2c, 0x1b, 0x48,
	0x9a, 0xf7, 0x4c, 0x74, 0x29, 0x88, 0xf5, 0x4d, 0xde, 0xc2, 0x04, 0x98, 0xf4, 0xd0, 0xc7, 0x50,
	0xf3, 0xc4, 0x73, 0xc1, 0xac, 0x0f, 0x15, 0xe9, 0x96, 0x4c, 0x79, 0xa9, 0xbd, 0x87, 0x46, 0x5e,
	0x25, 0x0b, 0xf4, 0x9f, 0x65, 0x06, 0x79, 0x97, 0xe5, 0x82, 0xb9, 0x30, 0x0a, 0xd9, 0xa3, 0xf6,
	0x99, 0x40, 0xd3, 0x5e, 0xf1, 0x33, 0x7b, 0x15, 0x86, 0xd7, 0x6b, 0xaa, 0x01, 0xe5, 0xc0, 0x17,
	0xa5, 0xaa, 0xac, 0x1c, 0xf8, 0xf4, 0x29, 0x28, 0x4b, 0x09, 0xb4, 0x67, 0xde, 0x07, 0xde, 0xa9,
	0xf4, 0x2a, 0xfd, 0xfa, 0x70, 0x57, 0x42, 0xec, 0x2b, 0x77, 0xac, 0xe8, 0xd4, 0xbe, 0x10, 0x50,
	0xff, 0x84, 0xb9, 0x56, 0xef, 0x37, 0x97, 0x66, 0x80, 0xa0, 0x14, 0xd6, 0x8e, 0x52, 0x68, 0x30,
	0xfd, 0xf5, 0x44, 0x77, 0xdc, 0xe9, 0xc8, 0x18, 0xeb, 0xa6, 0xab, 0x96, 0x68, 0x0b, 0xd4, 0x5c,
	0xb3, 0x27, 0xce, 0xb1, 0x3d, 0x31, 0x0c, 0x95, 0xd0, 0x5d, 0x68, 0x32, 0xdd, 0xb1, 0x2d, 0xd3,
	0xd1, 0x73, 0x2b, 0xd0, 0x3d, 0xb8, 0xbb, 0x11, 0x37, 0xde, 0xfa, 0xe0, 0x2d, 0x34, 0xb7, 0xf6,
	0x8f, 0xd6, 0xa0, 0x6c, 0xbd, 0x54, 0x4b, 0xf4, 0x11, 0x3c, 0xd0, 0x19, 0x93, 0x84, 0xe9, 0xd8,
	0x7c, 0xf3, 0xdc, 0x18, 0xbf, 0x98, 0x8e, 0x2c, 0xc3, 0xd0, 0x47, 0xee, 0xd8, 0x32, 0x55, 0xa4,
	0x0f, 0xe1, 0xfe, 0x3f, 0x2c, 0xce, 0x89, 0x39, 0x72, 0x4f, 0x6c, 0x5d, 0x9d, 0x0f, 0xbf, 0x12,
	0xb8, 0x63, 0xc5, 0x49, 0x14, 0x39, 0x18, 0x5f, 0x06, 0x1e, 0xd2, 0x23, 0x68, 0xda, 0x71, 0xe4,
	0x21, 0xe7, 0x79, 0xf3, 0xb4, 0xbd, 0x35, 0x0d, 0xb9, 0x08, 0xfb, 0xf7, 0xfe, 0xd2, 0x65, 0xc0,
	0x67, 0xa0, 0x48, 0x46, 0xb6, 0xa8, 0xb4, 0x55, 0xdc, 0x64, 0xf9, 0x7e, 0x6f, 0x4b, 0xcd, 0x5e,
	0x1f, 0xa9, 0xdf, 0xd7, 0x5d, 0xf2, 0x63, 0xdd, 0x25, 0x3f, 0xd7, 0x5d, 0xf2, 0xed, 0x57, 0xb7,
	0xf4, 0xae, 0x26, 0xbe, 0x1d, 0x4f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x09, 0x42, 0x3d, 0x42,
	0x69, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OrtooServiceClient is the client API for OrtooService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrtooServiceClient interface {
	ProcessPushPull(ctx context.Context, in *PushPullRequest, opts ...grpc.CallOption) (*PushPullResponse, error)
	ProcessClient(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ClientResponse, error)
}

type ortooServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrtooServiceClient(cc *grpc.ClientConn) OrtooServiceClient {
	return &ortooServiceClient{cc}
}

func (c *ortooServiceClient) ProcessPushPull(ctx context.Context, in *PushPullRequest, opts ...grpc.CallOption) (*PushPullResponse, error) {
	out := new(PushPullResponse)
	err := c.cc.Invoke(ctx, "/model.OrtooService/ProcessPushPull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ortooServiceClient) ProcessClient(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ClientResponse, error) {
	out := new(ClientResponse)
	err := c.cc.Invoke(ctx, "/model.OrtooService/ProcessClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrtooServiceServer is the server API for OrtooService service.
type OrtooServiceServer interface {
	ProcessPushPull(context.Context, *PushPullRequest) (*PushPullResponse, error)
	ProcessClient(context.Context, *ClientRequest) (*ClientResponse, error)
}

// UnimplementedOrtooServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrtooServiceServer struct {
}

func (*UnimplementedOrtooServiceServer) ProcessPushPull(ctx context.Context, req *PushPullRequest) (*PushPullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPushPull not implemented")
}
func (*UnimplementedOrtooServiceServer) ProcessClient(ctx context.Context, req *ClientRequest) (*ClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessClient not implemented")
}

func RegisterOrtooServiceServer(s *grpc.Server, srv OrtooServiceServer) {
	s.RegisterService(&_OrtooService_serviceDesc, srv)
}

func _OrtooService_ProcessPushPull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushPullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrtooServiceServer).ProcessPushPull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.OrtooService/ProcessPushPull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrtooServiceServer).ProcessPushPull(ctx, req.(*PushPullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrtooService_ProcessClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrtooServiceServer).ProcessClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.OrtooService/ProcessClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrtooServiceServer).ProcessClient(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrtooService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.OrtooService",
	HandlerType: (*OrtooServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessPushPull",
			Handler:    _OrtooService_ProcessPushPull_Handler,
		},
		{
			MethodName: "ProcessClient",
			Handler:    _OrtooService_ProcessClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "request_response.proto",
}

func (m *MessageHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Collection) > 0 {
		i -= len(m.Collection)
		copy(dAtA[i:], m.Collection)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Collection)))
		i--
		dAtA[i] = 0x22
	}
	if m.TypeOf != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.TypeOf))
		i--
		dAtA[i] = 0x18
	}
	if m.Seq != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.State != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Client != nil {
		{
			size, err := m.Client.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushPullRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushPullRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushPullRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PushPullPacks) > 0 {
		for iNdEx := len(m.PushPullPacks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PushPullPacks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Id != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushPullResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushPullResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushPullResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PushPullPacks) > 0 {
		for iNdEx := len(m.PushPullPacks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PushPullPacks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Id != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRequestResponse(dAtA []byte, offset int, v uint64) int {
	offset -= sovRequestResponse(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MessageHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Seq != 0 {
		n += 1 + sovRequestResponse(uint64(m.Seq))
	}
	if m.TypeOf != 0 {
		n += 1 + sovRequestResponse(uint64(m.TypeOf))
	}
	l = len(m.Collection)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovRequestResponse(uint64(m.State))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Client != nil {
		l = m.Client.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushPullRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovRequestResponse(uint64(m.Id))
	}
	if len(m.PushPullPacks) > 0 {
		for _, e := range m.PushPullPacks {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushPullResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovRequestResponse(uint64(m.Id))
	}
	if len(m.PushPullPacks) > 0 {
		for _, e := range m.PushPullPacks {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRequestResponse(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRequestResponse(x uint64) (n int) {
	return sovRequestResponse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MessageHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeOf", wireType)
			}
			m.TypeOf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeOf |= TypeOfMessage(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collection = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= StateOfResponse(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &MessageHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Client == nil {
				m.Client = &Client{}
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &MessageHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &ResponseState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushPullRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushPullRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushPullRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &MessageHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushPullPacks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushPullPacks = append(m.PushPullPacks, &PushPullPack{})
			if err := m.PushPullPacks[len(m.PushPullPacks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushPullResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushPullResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushPullResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &MessageHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushPullPacks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushPullPacks = append(m.PushPullPacks, &PushPullPack{})
			if err := m.PushPullPacks[len(m.PushPullPacks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequestResponse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRequestResponse
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthRequestResponse
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRequestResponse
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRequestResponse(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthRequestResponse
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRequestResponse = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequestResponse   = fmt.Errorf("proto: integer overflow")
)

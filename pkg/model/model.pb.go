// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: model.proto

package model

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SyncType int32

const (
	SyncType_LOCAL_ONLY SyncType = 0
	SyncType_MANUALLY   SyncType = 1
	SyncType_NOTIFIABLE SyncType = 2
)

var SyncType_name = map[int32]string{
	0: "LOCAL_ONLY",
	1: "MANUALLY",
	2: "NOTIFIABLE",
}

var SyncType_value = map[string]int32{
	"LOCAL_ONLY": 0,
	"MANUALLY":   1,
	"NOTIFIABLE": 2,
}

func (x SyncType) String() string {
	return proto.EnumName(SyncType_name, int32(x))
}

func (SyncType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{0}
}

type TypeOfOperation int32

const (
	TypeOfOperation_SNAPSHOT         TypeOfOperation = 0
	TypeOfOperation_DELETE           TypeOfOperation = 2
	TypeOfOperation_ERROR            TypeOfOperation = 3
	TypeOfOperation_TRANSACTION      TypeOfOperation = 5
	TypeOfOperation_COUNTER_INCREASE TypeOfOperation = 11
	TypeOfOperation_HASH_MAP_PUT     TypeOfOperation = 21
	TypeOfOperation_HASH_MAP_REMOVE  TypeOfOperation = 22
	TypeOfOperation_LIST_INSERT      TypeOfOperation = 31
	TypeOfOperation_LIST_DELETE      TypeOfOperation = 32
	TypeOfOperation_LIST_UPDATE      TypeOfOperation = 33
	TypeOfOperation_DOCUMENT_PUT_OBJ TypeOfOperation = 41
	TypeOfOperation_DOCUMENT_DEL_OBJ TypeOfOperation = 42
	TypeOfOperation_DOCUMENT_INS_ARR TypeOfOperation = 43
	TypeOfOperation_DOCUMENT_DEL_ARR TypeOfOperation = 44
	TypeOfOperation_DOCUMENT_UPD_ARR TypeOfOperation = 45
)

var TypeOfOperation_name = map[int32]string{
	0:  "SNAPSHOT",
	2:  "DELETE",
	3:  "ERROR",
	5:  "TRANSACTION",
	11: "COUNTER_INCREASE",
	21: "HASH_MAP_PUT",
	22: "HASH_MAP_REMOVE",
	31: "LIST_INSERT",
	32: "LIST_DELETE",
	33: "LIST_UPDATE",
	41: "DOCUMENT_PUT_OBJ",
	42: "DOCUMENT_DEL_OBJ",
	43: "DOCUMENT_INS_ARR",
	44: "DOCUMENT_DEL_ARR",
	45: "DOCUMENT_UPD_ARR",
}

var TypeOfOperation_value = map[string]int32{
	"SNAPSHOT":         0,
	"DELETE":           2,
	"ERROR":            3,
	"TRANSACTION":      5,
	"COUNTER_INCREASE": 11,
	"HASH_MAP_PUT":     21,
	"HASH_MAP_REMOVE":  22,
	"LIST_INSERT":      31,
	"LIST_DELETE":      32,
	"LIST_UPDATE":      33,
	"DOCUMENT_PUT_OBJ": 41,
	"DOCUMENT_DEL_OBJ": 42,
	"DOCUMENT_INS_ARR": 43,
	"DOCUMENT_DEL_ARR": 44,
	"DOCUMENT_UPD_ARR": 45,
}

func (x TypeOfOperation) String() string {
	return proto.EnumName(TypeOfOperation_name, int32(x))
}

func (TypeOfOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{1}
}

type TypeOfDatatype int32

const (
	TypeOfDatatype_COUNTER  TypeOfDatatype = 0
	TypeOfDatatype_HASH_MAP TypeOfDatatype = 1
	TypeOfDatatype_LIST     TypeOfDatatype = 2
	TypeOfDatatype_DOCUMENT TypeOfDatatype = 3
)

var TypeOfDatatype_name = map[int32]string{
	0: "COUNTER",
	1: "HASH_MAP",
	2: "LIST",
	3: "DOCUMENT",
}

var TypeOfDatatype_value = map[string]int32{
	"COUNTER":  0,
	"HASH_MAP": 1,
	"LIST":     2,
	"DOCUMENT": 3,
}

func (x TypeOfDatatype) String() string {
	return proto.EnumName(TypeOfDatatype_name, int32(x))
}

func (TypeOfDatatype) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{2}
}

type StateOfDatatype int32

const (
	StateOfDatatype_DUE_TO_CREATE           StateOfDatatype = 0
	StateOfDatatype_DUE_TO_SUBSCRIBE        StateOfDatatype = 1
	StateOfDatatype_DUE_TO_SUBSCRIBE_CREATE StateOfDatatype = 2
	StateOfDatatype_SUBSCRIBED              StateOfDatatype = 4
	StateOfDatatype_DUE_TO_UNSUBSCRIBE      StateOfDatatype = 5
	StateOfDatatype_UNSUBSCRIBED            StateOfDatatype = 6
	StateOfDatatype_DELETED                 StateOfDatatype = 7
)

var StateOfDatatype_name = map[int32]string{
	0: "DUE_TO_CREATE",
	1: "DUE_TO_SUBSCRIBE",
	2: "DUE_TO_SUBSCRIBE_CREATE",
	4: "SUBSCRIBED",
	5: "DUE_TO_UNSUBSCRIBE",
	6: "UNSUBSCRIBED",
	7: "DELETED",
}

var StateOfDatatype_value = map[string]int32{
	"DUE_TO_CREATE":           0,
	"DUE_TO_SUBSCRIBE":        1,
	"DUE_TO_SUBSCRIBE_CREATE": 2,
	"SUBSCRIBED":              4,
	"DUE_TO_UNSUBSCRIBE":      5,
	"UNSUBSCRIBED":            6,
	"DELETED":                 7,
}

func (x StateOfDatatype) String() string {
	return proto.EnumName(StateOfDatatype_name, int32(x))
}

func (StateOfDatatype) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{3}
}

type Client struct {
	CUID                 []byte   `protobuf:"bytes,1,opt,name=CUID,proto3" json:"CUID,omitempty"`
	Alias                string   `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	Collection           string   `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	SyncType             SyncType `protobuf:"varint,4,opt,name=syncType,proto3,enum=model.SyncType" json:"syncType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Client) Reset()         { *m = Client{} }
func (m *Client) String() string { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()    {}
func (*Client) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{0}
}
func (m *Client) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Client) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Client.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Client) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Client.Merge(m, src)
}
func (m *Client) XXX_Size() int {
	return m.Size()
}
func (m *Client) XXX_DiscardUnknown() {
	xxx_messageInfo_Client.DiscardUnknown(m)
}

var xxx_messageInfo_Client proto.InternalMessageInfo

func (m *Client) GetCUID() []byte {
	if m != nil {
		return m.CUID
	}
	return nil
}

func (m *Client) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *Client) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *Client) GetSyncType() SyncType {
	if m != nil {
		return m.SyncType
	}
	return SyncType_LOCAL_ONLY
}

type Timestamp struct {
	// @inject_tag: json:"e,omitempty"
	Era uint32 `protobuf:"varint,1,opt,name=era,proto3" json:"e,omitempty"`
	// @inject_tag: json:"l,omitempty"
	Lamport uint64 `protobuf:"varint,2,opt,name=lamport,proto3" json:"l,omitempty"`
	// @inject_tag: json:"c,omitempty"
	CUID []byte `protobuf:"bytes,3,opt,name=CUID,proto3" json:"c,omitempty"`
	// @inject_tag: json:"d,omitempty"
	Delimiter            uint32   `protobuf:"varint,4,opt,name=delimiter,proto3" json:"d,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Timestamp) Reset()         { *m = Timestamp{} }
func (m *Timestamp) String() string { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()    {}
func (*Timestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{1}
}
func (m *Timestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Timestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Timestamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Timestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timestamp.Merge(m, src)
}
func (m *Timestamp) XXX_Size() int {
	return m.Size()
}
func (m *Timestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_Timestamp.DiscardUnknown(m)
}

var xxx_messageInfo_Timestamp proto.InternalMessageInfo

func (m *Timestamp) GetEra() uint32 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *Timestamp) GetLamport() uint64 {
	if m != nil {
		return m.Lamport
	}
	return 0
}

func (m *Timestamp) GetCUID() []byte {
	if m != nil {
		return m.CUID
	}
	return nil
}

func (m *Timestamp) GetDelimiter() uint32 {
	if m != nil {
		return m.Delimiter
	}
	return 0
}

type OperationID struct {
	// @inject_tag: json:"e,omitempty"
	Era uint32 `protobuf:"varint,1,opt,name=era,proto3" json:"e,omitempty"`
	// @inject_tag: json:"l,omitempty"
	Lamport uint64 `protobuf:"varint,2,opt,name=lamport,proto3" json:"l,omitempty"`
	// @inject_tag: json:"c,omitempty"
	CUID []byte `protobuf:"bytes,3,opt,name=CUID,proto3" json:"c,omitempty"`
	// @inject_tag: json:"s,omitempty"
	Seq                  uint64   `protobuf:"varint,4,opt,name=seq,proto3" json:"s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperationID) Reset()         { *m = OperationID{} }
func (m *OperationID) String() string { return proto.CompactTextString(m) }
func (*OperationID) ProtoMessage()    {}
func (*OperationID) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{2}
}
func (m *OperationID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationID.Merge(m, src)
}
func (m *OperationID) XXX_Size() int {
	return m.Size()
}
func (m *OperationID) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationID.DiscardUnknown(m)
}

var xxx_messageInfo_OperationID proto.InternalMessageInfo

func (m *OperationID) GetEra() uint32 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *OperationID) GetLamport() uint64 {
	if m != nil {
		return m.Lamport
	}
	return 0
}

func (m *OperationID) GetCUID() []byte {
	if m != nil {
		return m.CUID
	}
	return nil
}

func (m *OperationID) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type Operation struct {
	ID                   *OperationID    `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	OpType               TypeOfOperation `protobuf:"varint,2,opt,name=opType,proto3,enum=model.TypeOfOperation" json:"opType,omitempty"`
	Body                 []byte          `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Operation) Reset()         { *m = Operation{} }
func (m *Operation) String() string { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()    {}
func (*Operation) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{3}
}
func (m *Operation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation.Merge(m, src)
}
func (m *Operation) XXX_Size() int {
	return m.Size()
}
func (m *Operation) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation.DiscardUnknown(m)
}

var xxx_messageInfo_Operation proto.InternalMessageInfo

func (m *Operation) GetID() *OperationID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *Operation) GetOpType() TypeOfOperation {
	if m != nil {
		return m.OpType
	}
	return TypeOfOperation_SNAPSHOT
}

func (m *Operation) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type PushPullPack struct {
	DUID                 []byte       `protobuf:"bytes,1,opt,name=DUID,proto3" json:"DUID,omitempty"`
	Key                  string       `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Option               uint32       `protobuf:"fixed32,3,opt,name=option,proto3" json:"option,omitempty"`
	CheckPoint           *CheckPoint  `protobuf:"bytes,4,opt,name=checkPoint,proto3" json:"checkPoint,omitempty"`
	Era                  uint32       `protobuf:"varint,5,opt,name=era,proto3" json:"era,omitempty"`
	Type                 int32        `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	Operations           []*Operation `protobuf:"bytes,7,rep,name=operations,proto3" json:"operations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PushPullPack) Reset()         { *m = PushPullPack{} }
func (m *PushPullPack) String() string { return proto.CompactTextString(m) }
func (*PushPullPack) ProtoMessage()    {}
func (*PushPullPack) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{4}
}
func (m *PushPullPack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushPullPack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushPullPack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushPullPack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushPullPack.Merge(m, src)
}
func (m *PushPullPack) XXX_Size() int {
	return m.Size()
}
func (m *PushPullPack) XXX_DiscardUnknown() {
	xxx_messageInfo_PushPullPack.DiscardUnknown(m)
}

var xxx_messageInfo_PushPullPack proto.InternalMessageInfo

func (m *PushPullPack) GetDUID() []byte {
	if m != nil {
		return m.DUID
	}
	return nil
}

func (m *PushPullPack) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PushPullPack) GetOption() uint32 {
	if m != nil {
		return m.Option
	}
	return 0
}

func (m *PushPullPack) GetCheckPoint() *CheckPoint {
	if m != nil {
		return m.CheckPoint
	}
	return nil
}

func (m *PushPullPack) GetEra() uint32 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *PushPullPack) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *PushPullPack) GetOperations() []*Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

type CheckPoint struct {
	// @inject_tag: bson:"s",json:"s"
	Sseq uint64 `protobuf:"varint,1,opt,name=sseq,proto3" json:"s" bson:"s"`
	// @inject_tag: bson:"c",json:"c"
	Cseq                 uint64   `protobuf:"varint,2,opt,name=cseq,proto3" json:"c" bson:"c"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckPoint) Reset()         { *m = CheckPoint{} }
func (m *CheckPoint) String() string { return proto.CompactTextString(m) }
func (*CheckPoint) ProtoMessage()    {}
func (*CheckPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{5}
}
func (m *CheckPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckPoint.Merge(m, src)
}
func (m *CheckPoint) XXX_Size() int {
	return m.Size()
}
func (m *CheckPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckPoint.DiscardUnknown(m)
}

var xxx_messageInfo_CheckPoint proto.InternalMessageInfo

func (m *CheckPoint) GetSseq() uint64 {
	if m != nil {
		return m.Sseq
	}
	return 0
}

func (m *CheckPoint) GetCseq() uint64 {
	if m != nil {
		return m.Cseq
	}
	return 0
}

type NotificationPushPull struct {
	CUID                 string   `protobuf:"bytes,1,opt,name=CUID,proto3" json:"CUID,omitempty"`
	DUID                 string   `protobuf:"bytes,2,opt,name=DUID,proto3" json:"DUID,omitempty"`
	Sseq                 uint64   `protobuf:"varint,3,opt,name=sseq,proto3" json:"sseq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotificationPushPull) Reset()         { *m = NotificationPushPull{} }
func (m *NotificationPushPull) String() string { return proto.CompactTextString(m) }
func (*NotificationPushPull) ProtoMessage()    {}
func (*NotificationPushPull) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{6}
}
func (m *NotificationPushPull) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotificationPushPull) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotificationPushPull.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotificationPushPull) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationPushPull.Merge(m, src)
}
func (m *NotificationPushPull) XXX_Size() int {
	return m.Size()
}
func (m *NotificationPushPull) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationPushPull.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationPushPull proto.InternalMessageInfo

func (m *NotificationPushPull) GetCUID() string {
	if m != nil {
		return m.CUID
	}
	return ""
}

func (m *NotificationPushPull) GetDUID() string {
	if m != nil {
		return m.DUID
	}
	return ""
}

func (m *NotificationPushPull) GetSseq() uint64 {
	if m != nil {
		return m.Sseq
	}
	return 0
}

type DatatypeMeta struct {
	Key                  string          `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	DUID                 []byte          `protobuf:"bytes,2,opt,name=DUID,proto3" json:"DUID,omitempty"`
	OpID                 *OperationID    `protobuf:"bytes,3,opt,name=opID,proto3" json:"opID,omitempty"`
	TypeOf               TypeOfDatatype  `protobuf:"varint,4,opt,name=typeOf,proto3,enum=model.TypeOfDatatype" json:"typeOf,omitempty"`
	State                StateOfDatatype `protobuf:"varint,5,opt,name=state,proto3,enum=model.StateOfDatatype" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DatatypeMeta) Reset()         { *m = DatatypeMeta{} }
func (m *DatatypeMeta) String() string { return proto.CompactTextString(m) }
func (*DatatypeMeta) ProtoMessage()    {}
func (*DatatypeMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{7}
}
func (m *DatatypeMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatatypeMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DatatypeMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DatatypeMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatatypeMeta.Merge(m, src)
}
func (m *DatatypeMeta) XXX_Size() int {
	return m.Size()
}
func (m *DatatypeMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_DatatypeMeta.DiscardUnknown(m)
}

var xxx_messageInfo_DatatypeMeta proto.InternalMessageInfo

func (m *DatatypeMeta) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DatatypeMeta) GetDUID() []byte {
	if m != nil {
		return m.DUID
	}
	return nil
}

func (m *DatatypeMeta) GetOpID() *OperationID {
	if m != nil {
		return m.OpID
	}
	return nil
}

func (m *DatatypeMeta) GetTypeOf() TypeOfDatatype {
	if m != nil {
		return m.TypeOf
	}
	return TypeOfDatatype_COUNTER
}

func (m *DatatypeMeta) GetState() StateOfDatatype {
	if m != nil {
		return m.State
	}
	return StateOfDatatype_DUE_TO_CREATE
}

func init() {
	proto.RegisterEnum("model.SyncType", SyncType_name, SyncType_value)
	proto.RegisterEnum("model.TypeOfOperation", TypeOfOperation_name, TypeOfOperation_value)
	proto.RegisterEnum("model.TypeOfDatatype", TypeOfDatatype_name, TypeOfDatatype_value)
	proto.RegisterEnum("model.StateOfDatatype", StateOfDatatype_name, StateOfDatatype_value)
	proto.RegisterType((*Client)(nil), "model.Client")
	proto.RegisterType((*Timestamp)(nil), "model.Timestamp")
	proto.RegisterType((*OperationID)(nil), "model.OperationID")
	proto.RegisterType((*Operation)(nil), "model.Operation")
	proto.RegisterType((*PushPullPack)(nil), "model.PushPullPack")
	proto.RegisterType((*CheckPoint)(nil), "model.CheckPoint")
	proto.RegisterType((*NotificationPushPull)(nil), "model.NotificationPushPull")
	proto.RegisterType((*DatatypeMeta)(nil), "model.DatatypeMeta")
}

func init() { proto.RegisterFile("model.proto", fileDescriptor_4c16552f9fdb66d8) }

var fileDescriptor_4c16552f9fdb66d8 = []byte{
	// 822 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xee, 0x38, 0xbf, 0x9a, 0xe7, 0xb4, 0x99, 0x1d, 0xba, 0x25, 0x12, 0x28, 0x04, 0x1f, 0x50,
	0xc8, 0xee, 0x56, 0x50, 0x38, 0x70, 0x75, 0xec, 0x41, 0x35, 0x72, 0x6c, 0x6b, 0x6c, 0x23, 0xed,
	0xc9, 0xf2, 0xba, 0x5e, 0xad, 0x55, 0xa7, 0x0e, 0xb1, 0xf7, 0xd0, 0x13, 0xff, 0x06, 0x27, 0x6e,
	0xfc, 0x11, 0xfc, 0x07, 0x1c, 0xb9, 0x71, 0x45, 0xe5, 0x1f, 0x41, 0x33, 0x1e, 0x3b, 0x4e, 0xe1,
	0xb6, 0xb7, 0x37, 0xdf, 0x7c, 0x79, 0xdf, 0xf7, 0xbe, 0x37, 0x56, 0x40, 0xdd, 0x16, 0xb7, 0x69,
	0x7e, 0xb5, 0xdb, 0x17, 0x55, 0x41, 0x06, 0xe2, 0xa0, 0xfd, 0x0c, 0x43, 0x23, 0xcf, 0xd2, 0xfb,
	0x8a, 0x10, 0xe8, 0x1b, 0xa1, 0x65, 0xce, 0xd0, 0x02, 0x2d, 0x27, 0x4c, 0xd4, 0xe4, 0x02, 0x06,
	0x71, 0x9e, 0xc5, 0xe5, 0x4c, 0x59, 0xa0, 0xe5, 0x98, 0xd5, 0x07, 0x32, 0x07, 0x48, 0x8a, 0x3c,
	0x4f, 0x93, 0x2a, 0x2b, 0xee, 0x67, 0x3d, 0x71, 0xd5, 0x41, 0xc8, 0x0b, 0x38, 0x2d, 0x1f, 0xee,
	0x93, 0xe0, 0x61, 0x97, 0xce, 0xfa, 0x0b, 0xb4, 0x3c, 0xbf, 0x9e, 0x5e, 0xd5, 0xd2, 0xbe, 0x84,
	0x59, 0x4b, 0xd0, 0x32, 0x18, 0x07, 0xd9, 0x36, 0x2d, 0xab, 0x78, 0xbb, 0x23, 0x18, 0x7a, 0xe9,
	0x3e, 0x16, 0x16, 0xce, 0x18, 0x2f, 0xc9, 0x0c, 0x46, 0x79, 0xbc, 0xdd, 0x15, 0xfb, 0x4a, 0x78,
	0xe8, 0xb3, 0xe6, 0xd8, 0xfa, 0xed, 0x75, 0xfc, 0x7e, 0x0a, 0xe3, 0xdb, 0x34, 0xcf, 0xb6, 0x59,
	0x95, 0xee, 0x85, 0xf4, 0x19, 0x3b, 0x00, 0x5a, 0x04, 0xaa, 0xbb, 0x4b, 0xf7, 0x31, 0x37, 0x69,
	0x99, 0x1f, 0x2c, 0x86, 0xa1, 0x57, 0xa6, 0x3f, 0x09, 0x99, 0x3e, 0xe3, 0xa5, 0x56, 0xc2, 0xb8,
	0x15, 0x20, 0x1a, 0x28, 0x32, 0x4d, 0xf5, 0x9a, 0xc8, 0xf9, 0x3b, 0xf2, 0x4c, 0xb1, 0x4c, 0x72,
	0x05, 0xc3, 0x62, 0x27, 0x72, 0x52, 0x44, 0x4e, 0x97, 0x92, 0xc7, 0x21, 0xf7, 0x6d, 0xcb, 0x66,
	0x92, 0xc5, 0x6d, 0xbc, 0x29, 0x6e, 0x1f, 0x1a, 0x1b, 0xbc, 0xd6, 0xfe, 0x42, 0x30, 0xf1, 0xde,
	0x97, 0xef, 0xbc, 0xf7, 0x79, 0xee, 0xc5, 0xc9, 0x1d, 0x27, 0x99, 0x9d, 0x45, 0x9a, 0xd2, 0xeb,
	0x5d, 0xfa, 0x20, 0xd7, 0xc8, 0x4b, 0x72, 0xc9, 0xa5, 0xdb, 0x05, 0x8e, 0x98, 0x3c, 0x91, 0xaf,
	0x01, 0x92, 0x77, 0x69, 0x72, 0xe7, 0x15, 0xd9, 0x7d, 0x25, 0x86, 0x53, 0xaf, 0x9f, 0x49, 0x5b,
	0x46, 0x7b, 0xc1, 0x3a, 0xa4, 0x26, 0xc8, 0xc1, 0x21, 0x48, 0x02, 0xfd, 0x8a, 0x4f, 0x35, 0x5c,
	0xa0, 0xe5, 0x80, 0x89, 0x9a, 0x7c, 0x05, 0x50, 0x34, 0x03, 0x95, 0xb3, 0xd1, 0xa2, 0xb7, 0x54,
	0xaf, 0xf1, 0xd3, 0x5c, 0x58, 0x87, 0xa3, 0x7d, 0x0b, 0x70, 0x50, 0xe4, 0x3d, 0x4b, 0x9e, 0x37,
	0x12, 0x79, 0x8b, 0x9a, 0x63, 0x09, 0xc7, 0xea, 0x6d, 0x89, 0x5a, 0x63, 0x70, 0xe1, 0x14, 0x55,
	0xf6, 0x36, 0x4b, 0x44, 0x9b, 0x26, 0x9a, 0xa3, 0xf7, 0x3d, 0x96, 0x2b, 0x6c, 0xa2, 0xaa, 0x73,
	0xa9, 0xa3, 0x6a, 0x74, 0x7a, 0x07, 0x1d, 0xed, 0x77, 0x04, 0x13, 0x33, 0xae, 0x62, 0x3e, 0xc8,
	0x26, 0xad, 0xe2, 0x26, 0x4f, 0x74, 0xc8, 0xb3, 0xdb, 0xaa, 0x49, 0xfd, 0x0b, 0xe8, 0x17, 0x3b,
	0xf9, 0x6a, 0xfe, 0xff, 0x11, 0x88, 0x7b, 0xf2, 0x0a, 0x86, 0x95, 0xd8, 0xb8, 0xfc, 0x5c, 0x9e,
	0x1f, 0x3d, 0x83, 0x46, 0x98, 0x49, 0x12, 0x79, 0x09, 0x83, 0xb2, 0x8a, 0xab, 0x54, 0x24, 0x7e,
	0x78, 0x34, 0x3e, 0xc7, 0x3a, 0xf4, 0x9a, 0xb4, 0xfa, 0x0e, 0x4e, 0x9b, 0xcf, 0x8e, 0x9c, 0x03,
	0xd8, 0xae, 0xa1, 0xdb, 0x91, 0xeb, 0xd8, 0xaf, 0xf1, 0x09, 0x99, 0xc0, 0xe9, 0x46, 0x77, 0x42,
	0xdd, 0xb6, 0x5f, 0x63, 0xc4, 0x6f, 0x1d, 0x37, 0xb0, 0xbe, 0xb7, 0xf4, 0xb5, 0x4d, 0xb1, 0xb2,
	0xfa, 0x4d, 0x81, 0xe9, 0x93, 0x97, 0xc8, 0x7f, 0xe1, 0x3b, 0xba, 0xe7, 0xdf, 0xb8, 0x01, 0x3e,
	0x21, 0x00, 0x43, 0x93, 0xda, 0x34, 0xa0, 0x58, 0x21, 0x63, 0x18, 0x50, 0xc6, 0x5c, 0x86, 0x7b,
	0x64, 0x0a, 0x6a, 0xc0, 0x74, 0xc7, 0xd7, 0x8d, 0xc0, 0x72, 0x1d, 0x3c, 0x20, 0x17, 0x80, 0x0d,
	0x37, 0x74, 0x02, 0xca, 0x22, 0xcb, 0x31, 0x18, 0xd5, 0x7d, 0x8a, 0x55, 0x82, 0x61, 0x72, 0xa3,
	0xfb, 0x37, 0xd1, 0x46, 0xf7, 0x22, 0x2f, 0x0c, 0xf0, 0x73, 0xf2, 0x11, 0x4c, 0x5b, 0x84, 0xd1,
	0x8d, 0xfb, 0x23, 0xc5, 0x97, 0xbc, 0x9b, 0x6d, 0xf9, 0x41, 0x64, 0x39, 0x3e, 0x65, 0x01, 0xfe,
	0xac, 0x05, 0xa4, 0xf4, 0xa2, 0x05, 0x42, 0xcf, 0xd4, 0x03, 0x8a, 0x3f, 0xe7, 0x7a, 0xa6, 0x6b,
	0x84, 0x1b, 0xea, 0x04, 0xbc, 0x73, 0xe4, 0xae, 0x7f, 0xc0, 0x5f, 0x1e, 0xa1, 0x26, 0xb5, 0x05,
	0xba, 0x3a, 0x42, 0x2d, 0xc7, 0x8f, 0x74, 0xc6, 0xf0, 0x8b, 0xff, 0x70, 0x39, 0xfa, 0xf2, 0x08,
	0x0d, 0x3d, 0x53, 0xa0, 0xaf, 0x56, 0x06, 0x9c, 0x1f, 0x6f, 0x8a, 0xa8, 0x30, 0x92, 0xf3, 0xd6,
	0x21, 0x37, 0x43, 0x61, 0x44, 0x4e, 0xa1, 0xcf, 0xbd, 0x62, 0x85, 0xe3, 0x4d, 0x33, 0xdc, 0x5b,
	0xfd, 0x8a, 0x60, 0xfa, 0x64, 0x83, 0xe4, 0x19, 0x9c, 0x99, 0x21, 0x8d, 0x02, 0x37, 0xe2, 0x99,
	0x05, 0x14, 0x9f, 0x08, 0x07, 0x35, 0xe4, 0x87, 0x6b, 0xdf, 0x60, 0xd6, 0x9a, 0x62, 0x44, 0x3e,
	0x81, 0x8f, 0x9f, 0xa2, 0xcd, 0x4f, 0x14, 0xbe, 0xd6, 0x16, 0x35, 0x71, 0x9f, 0x5c, 0x02, 0x91,
	0xe4, 0xd0, 0x39, 0x34, 0x19, 0xf0, 0x75, 0x74, 0x00, 0x13, 0x0f, 0xf9, 0x18, 0x75, 0xc6, 0x26,
	0x1e, 0xad, 0xf1, 0x1f, 0x8f, 0x73, 0xf4, 0xe7, 0xe3, 0x1c, 0xfd, 0xfd, 0x38, 0x47, 0xbf, 0xfc,
	0x33, 0x3f, 0x79, 0x33, 0x14, 0xff, 0x24, 0xdf, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x26, 0x69,
	0x24, 0xd9, 0x58, 0x06, 0x00, 0x00,
}

func (m *Client) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Client) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Client) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SyncType != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.SyncType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Collection) > 0 {
		i -= len(m.Collection)
		copy(dAtA[i:], m.Collection)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Collection)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CUID) > 0 {
		i -= len(m.CUID)
		copy(dAtA[i:], m.CUID)
		i = encodeVarintModel(dAtA, i, uint64(len(m.CUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Timestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Timestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Timestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Delimiter != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Delimiter))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CUID) > 0 {
		i -= len(m.CUID)
		copy(dAtA[i:], m.CUID)
		i = encodeVarintModel(dAtA, i, uint64(len(m.CUID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Lamport != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Lamport))
		i--
		dAtA[i] = 0x10
	}
	if m.Era != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OperationID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Seq != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CUID) > 0 {
		i -= len(m.CUID)
		copy(dAtA[i:], m.CUID)
		i = encodeVarintModel(dAtA, i, uint64(len(m.CUID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Lamport != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Lamport))
		i--
		dAtA[i] = 0x10
	}
	if m.Era != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Operation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OpType != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.OpType))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushPullPack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushPullPack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushPullPack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Operations) > 0 {
		for iNdEx := len(m.Operations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Operations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Type != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x30
	}
	if m.Era != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x28
	}
	if m.CheckPoint != nil {
		{
			size, err := m.CheckPoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Option != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Option))
		i--
		dAtA[i] = 0x1d
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DUID) > 0 {
		i -= len(m.DUID)
		copy(dAtA[i:], m.DUID)
		i = encodeVarintModel(dAtA, i, uint64(len(m.DUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cseq != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Cseq))
		i--
		dAtA[i] = 0x10
	}
	if m.Sseq != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Sseq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotificationPushPull) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotificationPushPull) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotificationPushPull) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sseq != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Sseq))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DUID) > 0 {
		i -= len(m.DUID)
		copy(dAtA[i:], m.DUID)
		i = encodeVarintModel(dAtA, i, uint64(len(m.DUID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CUID) > 0 {
		i -= len(m.CUID)
		copy(dAtA[i:], m.CUID)
		i = encodeVarintModel(dAtA, i, uint64(len(m.CUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DatatypeMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatatypeMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatatypeMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if m.TypeOf != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.TypeOf))
		i--
		dAtA[i] = 0x20
	}
	if m.OpID != nil {
		{
			size, err := m.OpID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DUID) > 0 {
		i -= len(m.DUID)
		copy(dAtA[i:], m.DUID)
		i = encodeVarintModel(dAtA, i, uint64(len(m.DUID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintModel(dAtA []byte, offset int, v uint64) int {
	offset -= sovModel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Client) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CUID)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Collection)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.SyncType != 0 {
		n += 1 + sovModel(uint64(m.SyncType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Timestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovModel(uint64(m.Era))
	}
	if m.Lamport != 0 {
		n += 1 + sovModel(uint64(m.Lamport))
	}
	l = len(m.CUID)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Delimiter != 0 {
		n += 1 + sovModel(uint64(m.Delimiter))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperationID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovModel(uint64(m.Era))
	}
	if m.Lamport != 0 {
		n += 1 + sovModel(uint64(m.Lamport))
	}
	l = len(m.CUID)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Seq != 0 {
		n += 1 + sovModel(uint64(m.Seq))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Operation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if m.OpType != 0 {
		n += 1 + sovModel(uint64(m.OpType))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushPullPack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DUID)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Option != 0 {
		n += 5
	}
	if m.CheckPoint != nil {
		l = m.CheckPoint.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Era != 0 {
		n += 1 + sovModel(uint64(m.Era))
	}
	if m.Type != 0 {
		n += 1 + sovModel(uint64(m.Type))
	}
	if len(m.Operations) > 0 {
		for _, e := range m.Operations {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sseq != 0 {
		n += 1 + sovModel(uint64(m.Sseq))
	}
	if m.Cseq != 0 {
		n += 1 + sovModel(uint64(m.Cseq))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotificationPushPull) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CUID)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.DUID)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Sseq != 0 {
		n += 1 + sovModel(uint64(m.Sseq))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DatatypeMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.DUID)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.OpID != nil {
		l = m.OpID.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if m.TypeOf != 0 {
		n += 1 + sovModel(uint64(m.TypeOf))
	}
	if m.State != 0 {
		n += 1 + sovModel(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovModel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModel(x uint64) (n int) {
	return sovModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Client) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Client: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Client: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CUID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CUID = append(m.CUID[:0], dAtA[iNdEx:postIndex]...)
			if m.CUID == nil {
				m.CUID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collection = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncType", wireType)
			}
			m.SyncType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncType |= SyncType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Timestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Timestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Timestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lamport", wireType)
			}
			m.Lamport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lamport |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CUID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CUID = append(m.CUID[:0], dAtA[iNdEx:postIndex]...)
			if m.CUID == nil {
				m.CUID = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delimiter", wireType)
			}
			m.Delimiter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delimiter |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lamport", wireType)
			}
			m.Lamport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lamport |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CUID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CUID = append(m.CUID[:0], dAtA[iNdEx:postIndex]...)
			if m.CUID == nil {
				m.CUID = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &OperationID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			m.OpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpType |= TypeOfOperation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushPullPack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushPullPack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushPullPack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DUID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DUID = append(m.DUID[:0], dAtA[iNdEx:postIndex]...)
			if m.DUID == nil {
				m.DUID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			m.Option = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Option = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CheckPoint == nil {
				m.CheckPoint = &CheckPoint{}
			}
			if err := m.CheckPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operations = append(m.Operations, &Operation{})
			if err := m.Operations[len(m.Operations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sseq", wireType)
			}
			m.Sseq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sseq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cseq", wireType)
			}
			m.Cseq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cseq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotificationPushPull) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotificationPushPull: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotificationPushPull: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sseq", wireType)
			}
			m.Sseq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sseq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DatatypeMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatatypeMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatatypeMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DUID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DUID = append(m.DUID[:0], dAtA[iNdEx:postIndex]...)
			if m.DUID == nil {
				m.DUID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OpID == nil {
				m.OpID = &OperationID{}
			}
			if err := m.OpID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeOf", wireType)
			}
			m.TypeOf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeOf |= TypeOfDatatype(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= StateOfDatatype(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModel = fmt.Errorf("proto: unexpected end of group")
)

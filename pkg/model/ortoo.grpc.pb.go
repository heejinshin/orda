// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ortoo.grpc.proto

package model

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("ortoo.grpc.proto", fileDescriptor_61fc1459943e44c7) }

var fileDescriptor_61fc1459943e44c7 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x41, 0x4a, 0xc3, 0x40,
	0x14, 0x86, 0x4d, 0x45, 0x85, 0xa8, 0x28, 0x83, 0x5a, 0x09, 0x1a, 0x43, 0x56, 0x22, 0x34, 0xa1,
	0x2d, 0x88, 0x58, 0x11, 0x6a, 0x57, 0x2e, 0xc4, 0x50, 0x77, 0xee, 0xc6, 0xf4, 0x91, 0x06, 0xc6,
	0xbc, 0x31, 0x33, 0x89, 0x68, 0xe9, 0xa6, 0xde, 0x40, 0x37, 0x1e, 0xc9, 0xa5, 0xe0, 0x05, 0xa4,
	0x7a, 0x10, 0xe9, 0x24, 0x69, 0xc5, 0xaa, 0xab, 0x61, 0xfe, 0xff, 0xcd, 0x7c, 0x1f, 0x3c, 0x7d,
	0x15, 0x63, 0x89, 0xe8, 0x04, 0x31, 0xf7, 0x1d, 0x1e, 0xa3, 0x44, 0x32, 0xa7, 0x12, 0x63, 0x31,
	0x2b, 0x54, 0x66, 0x6c, 0x05, 0x88, 0x01, 0x03, 0x97, 0xf2, 0xd0, 0xa5, 0x51, 0x84, 0x92, 0xca,
	0x10, 0x23, 0x91, 0xb7, 0xd9, 0xe1, 0x57, 0x02, 0x88, 0x2a, 0xc8, 0x21, 0xa2, 0x3c, 0x4c, 0x6b,
	0x2e, 0x72, 0x35, 0x33, 0x3d, 0x5f, 0x7b, 0x98, 0xd5, 0x97, 0xce, 0x47, 0xbf, 0x5f, 0x40, 0x9c,
	0x86, 0x3e, 0x90, 0x81, 0xa6, 0xaf, 0x78, 0x31, 0xfa, 0x20, 0x84, 0x97, 0x88, 0xae, 0x97, 0x30,
	0x46, 0x36, 0x9c, 0x4c, 0xa0, 0x08, 0xda, 0x70, 0x93, 0x80, 0x90, 0x46, 0x79, 0x2a, 0x17, 0x1c,
	0x23, 0x01, 0xf6, 0xf1, 0xe0, 0xed, 0xf3, 0xa9, 0x74, 0x60, 0xd7, 0x95, 0x65, 0x5a, 0x75, 0x7b,
	0x5d, 0xa0, 0x1d, 0x88, 0x1d, 0x1f, 0x19, 0x03, 0x7f, 0x24, 0xd0, 0x77, 0x79, 0x22, 0xba, 0x3c,
	0x61, 0x4c, 0x4c, 0xda, 0x24, 0xec, 0xf4, 0x0f, 0xb5, 0x3d, 0x72, 0xaf, 0x2f, 0xe7, 0x0e, 0x2d,
	0x16, 0x42, 0x24, 0xc9, 0x5a, 0x4e, 0xca, 0xae, 0x05, 0x7f, 0xfd, 0x47, 0x9a, 0xd3, 0x8f, 0x14,
	0x7d, 0xdf, 0xae, 0xfe, 0x47, 0xf7, 0xd5, 0x9b, 0x5f, 0xd8, 0xb1, 0x4e, 0x0a, 0xf6, 0x78, 0x5c,
	0x90, 0xcd, 0x02, 0x35, 0xce, 0xce, 0x40, 0x08, 0x1a, 0x80, 0xf1, 0x67, 0x63, 0xef, 0x2a, 0x0f,
	0xdb, 0xb0, 0x0a, 0x8f, 0x09, 0x5f, 0xb8, 0xbd, 0x6f, 0x32, 0x27, 0x8d, 0xc7, 0xe6, 0x0e, 0xd9,
	0xd6, 0xcb, 0x6a, 0x13, 0x56, 0xd0, 0xf6, 0x5a, 0x56, 0x40, 0x25, 0xdc, 0xd2, 0x3b, 0xab, 0xe9,
	0x9d, 0x8a, 0x5a, 0x29, 0xad, 0xbe, 0x0c, 0x4d, 0xed, 0x75, 0x68, 0x6a, 0xef, 0x43, 0x53, 0x7b,
	0xfe, 0x30, 0x67, 0x2e, 0x17, 0x9c, 0xc6, 0x35, 0x76, 0x80, 0x5d, 0xcd, 0xab, 0x4d, 0xd6, 0xbf,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x77, 0xd9, 0x13, 0x3f, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OrtooServiceClient is the client API for OrtooService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrtooServiceClient interface {
	ProcessPushPull(ctx context.Context, in *PushPullRequest, opts ...grpc.CallOption) (*PushPullResponse, error)
	ProcessClient(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ClientResponse, error)
	ProcessCollections(ctx context.Context, in *CollectionMessage, opts ...grpc.CallOption) (*CollectionMessage, error)
}

type ortooServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrtooServiceClient(cc *grpc.ClientConn) OrtooServiceClient {
	return &ortooServiceClient{cc}
}

func (c *ortooServiceClient) ProcessPushPull(ctx context.Context, in *PushPullRequest, opts ...grpc.CallOption) (*PushPullResponse, error) {
	out := new(PushPullResponse)
	err := c.cc.Invoke(ctx, "/ortoo.OrtooService/ProcessPushPull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ortooServiceClient) ProcessClient(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ClientResponse, error) {
	out := new(ClientResponse)
	err := c.cc.Invoke(ctx, "/ortoo.OrtooService/ProcessClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ortooServiceClient) ProcessCollections(ctx context.Context, in *CollectionMessage, opts ...grpc.CallOption) (*CollectionMessage, error) {
	out := new(CollectionMessage)
	err := c.cc.Invoke(ctx, "/ortoo.OrtooService/ProcessCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrtooServiceServer is the server API for OrtooService service.
type OrtooServiceServer interface {
	ProcessPushPull(context.Context, *PushPullRequest) (*PushPullResponse, error)
	ProcessClient(context.Context, *ClientRequest) (*ClientResponse, error)
	ProcessCollections(context.Context, *CollectionMessage) (*CollectionMessage, error)
}

// UnimplementedOrtooServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrtooServiceServer struct {
}

func (*UnimplementedOrtooServiceServer) ProcessPushPull(ctx context.Context, req *PushPullRequest) (*PushPullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPushPull not implemented")
}
func (*UnimplementedOrtooServiceServer) ProcessClient(ctx context.Context, req *ClientRequest) (*ClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessClient not implemented")
}
func (*UnimplementedOrtooServiceServer) ProcessCollections(ctx context.Context, req *CollectionMessage) (*CollectionMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessCollections not implemented")
}

func RegisterOrtooServiceServer(s *grpc.Server, srv OrtooServiceServer) {
	s.RegisterService(&_OrtooService_serviceDesc, srv)
}

func _OrtooService_ProcessPushPull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushPullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrtooServiceServer).ProcessPushPull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ortoo.OrtooService/ProcessPushPull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrtooServiceServer).ProcessPushPull(ctx, req.(*PushPullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrtooService_ProcessClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrtooServiceServer).ProcessClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ortoo.OrtooService/ProcessClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrtooServiceServer).ProcessClient(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrtooService_ProcessCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrtooServiceServer).ProcessCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ortoo.OrtooService/ProcessCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrtooServiceServer).ProcessCollections(ctx, req.(*CollectionMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrtooService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ortoo.OrtooService",
	HandlerType: (*OrtooServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessPushPull",
			Handler:    _OrtooService_ProcessPushPull_Handler,
		},
		{
			MethodName: "ProcessClient",
			Handler:    _OrtooService_ProcessClient_Handler,
		},
		{
			MethodName: "ProcessCollections",
			Handler:    _OrtooService_ProcessCollections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ortoo.grpc.proto",
}

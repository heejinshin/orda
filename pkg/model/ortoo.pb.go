// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ortoo.proto

package model

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Client struct {
	CUID                 []byte   `protobuf:"bytes,1,opt,name=CUID,proto3" json:"CUID,omitempty"`
	Alias                string   `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	Collection           string   `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	SyncType             SyncType `protobuf:"varint,4,opt,name=syncType,proto3,enum=ortoo.SyncType" json:"syncType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Client) Reset()         { *m = Client{} }
func (m *Client) String() string { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()    {}
func (*Client) Descriptor() ([]byte, []int) {
	return fileDescriptor_30a908b65ec6aa42, []int{0}
}
func (m *Client) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Client) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Client.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Client) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Client.Merge(m, src)
}
func (m *Client) XXX_Size() int {
	return m.Size()
}
func (m *Client) XXX_DiscardUnknown() {
	xxx_messageInfo_Client.DiscardUnknown(m)
}

var xxx_messageInfo_Client proto.InternalMessageInfo

func (m *Client) GetCUID() []byte {
	if m != nil {
		return m.CUID
	}
	return nil
}

func (m *Client) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *Client) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *Client) GetSyncType() SyncType {
	if m != nil {
		return m.SyncType
	}
	return SyncType_LOCAL_ONLY
}

type Timestamp struct {
	// @inject_tag: json:"e,omitempty"
	Era uint32 `protobuf:"varint,1,opt,name=era,proto3" json:"e,omitempty"`
	// @inject_tag: json:"l,omitempty"
	Lamport uint64 `protobuf:"varint,2,opt,name=lamport,proto3" json:"l,omitempty"`
	// @inject_tag: json:"c,omitempty"
	CUID []byte `protobuf:"bytes,3,opt,name=CUID,proto3" json:"c,omitempty"`
	// @inject_tag: json:"d,omitempty"
	Delimiter            uint32   `protobuf:"varint,4,opt,name=delimiter,proto3" json:"d,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Timestamp) Reset()         { *m = Timestamp{} }
func (m *Timestamp) String() string { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()    {}
func (*Timestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_30a908b65ec6aa42, []int{1}
}
func (m *Timestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Timestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Timestamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Timestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timestamp.Merge(m, src)
}
func (m *Timestamp) XXX_Size() int {
	return m.Size()
}
func (m *Timestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_Timestamp.DiscardUnknown(m)
}

var xxx_messageInfo_Timestamp proto.InternalMessageInfo

func (m *Timestamp) GetEra() uint32 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *Timestamp) GetLamport() uint64 {
	if m != nil {
		return m.Lamport
	}
	return 0
}

func (m *Timestamp) GetCUID() []byte {
	if m != nil {
		return m.CUID
	}
	return nil
}

func (m *Timestamp) GetDelimiter() uint32 {
	if m != nil {
		return m.Delimiter
	}
	return 0
}

type OperationID struct {
	// @inject_tag: json:"e,omitempty"
	Era uint32 `protobuf:"varint,1,opt,name=era,proto3" json:"e,omitempty"`
	// @inject_tag: json:"l,omitempty"
	Lamport uint64 `protobuf:"varint,2,opt,name=lamport,proto3" json:"l,omitempty"`
	// @inject_tag: json:"c,omitempty"
	CUID []byte `protobuf:"bytes,3,opt,name=CUID,proto3" json:"c,omitempty"`
	// @inject_tag: json:"s,omitempty"
	Seq                  uint64   `protobuf:"varint,4,opt,name=seq,proto3" json:"s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperationID) Reset()         { *m = OperationID{} }
func (m *OperationID) String() string { return proto.CompactTextString(m) }
func (*OperationID) ProtoMessage()    {}
func (*OperationID) Descriptor() ([]byte, []int) {
	return fileDescriptor_30a908b65ec6aa42, []int{2}
}
func (m *OperationID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationID.Merge(m, src)
}
func (m *OperationID) XXX_Size() int {
	return m.Size()
}
func (m *OperationID) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationID.DiscardUnknown(m)
}

var xxx_messageInfo_OperationID proto.InternalMessageInfo

func (m *OperationID) GetEra() uint32 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *OperationID) GetLamport() uint64 {
	if m != nil {
		return m.Lamport
	}
	return 0
}

func (m *OperationID) GetCUID() []byte {
	if m != nil {
		return m.CUID
	}
	return nil
}

func (m *OperationID) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type Operation struct {
	ID                   *OperationID    `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	OpType               TypeOfOperation `protobuf:"varint,2,opt,name=opType,proto3,enum=ortoo.TypeOfOperation" json:"opType,omitempty"`
	Body                 []byte          `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Operation) Reset()         { *m = Operation{} }
func (m *Operation) String() string { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()    {}
func (*Operation) Descriptor() ([]byte, []int) {
	return fileDescriptor_30a908b65ec6aa42, []int{3}
}
func (m *Operation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation.Merge(m, src)
}
func (m *Operation) XXX_Size() int {
	return m.Size()
}
func (m *Operation) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation.DiscardUnknown(m)
}

var xxx_messageInfo_Operation proto.InternalMessageInfo

func (m *Operation) GetID() *OperationID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *Operation) GetOpType() TypeOfOperation {
	if m != nil {
		return m.OpType
	}
	return TypeOfOperation_SNAPSHOT
}

func (m *Operation) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type PushPullPack struct {
	DUID                 []byte       `protobuf:"bytes,1,opt,name=DUID,proto3" json:"DUID,omitempty"`
	Key                  string       `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Option               uint32       `protobuf:"fixed32,3,opt,name=option,proto3" json:"option,omitempty"`
	CheckPoint           *CheckPoint  `protobuf:"bytes,4,opt,name=checkPoint,proto3" json:"checkPoint,omitempty"`
	Era                  uint32       `protobuf:"varint,5,opt,name=era,proto3" json:"era,omitempty"`
	Type                 int32        `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	Operations           []*Operation `protobuf:"bytes,7,rep,name=operations,proto3" json:"operations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PushPullPack) Reset()         { *m = PushPullPack{} }
func (m *PushPullPack) String() string { return proto.CompactTextString(m) }
func (*PushPullPack) ProtoMessage()    {}
func (*PushPullPack) Descriptor() ([]byte, []int) {
	return fileDescriptor_30a908b65ec6aa42, []int{4}
}
func (m *PushPullPack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushPullPack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushPullPack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushPullPack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushPullPack.Merge(m, src)
}
func (m *PushPullPack) XXX_Size() int {
	return m.Size()
}
func (m *PushPullPack) XXX_DiscardUnknown() {
	xxx_messageInfo_PushPullPack.DiscardUnknown(m)
}

var xxx_messageInfo_PushPullPack proto.InternalMessageInfo

func (m *PushPullPack) GetDUID() []byte {
	if m != nil {
		return m.DUID
	}
	return nil
}

func (m *PushPullPack) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PushPullPack) GetOption() uint32 {
	if m != nil {
		return m.Option
	}
	return 0
}

func (m *PushPullPack) GetCheckPoint() *CheckPoint {
	if m != nil {
		return m.CheckPoint
	}
	return nil
}

func (m *PushPullPack) GetEra() uint32 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *PushPullPack) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *PushPullPack) GetOperations() []*Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

type CheckPoint struct {
	// @inject_tag: bson:"s",json:"s"
	Sseq uint64 `protobuf:"varint,1,opt,name=sseq,proto3" json:"s" bson:"s"`
	// @inject_tag: bson:"c",json:"c"
	Cseq                 uint64   `protobuf:"varint,2,opt,name=cseq,proto3" json:"c" bson:"c"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckPoint) Reset()         { *m = CheckPoint{} }
func (m *CheckPoint) String() string { return proto.CompactTextString(m) }
func (*CheckPoint) ProtoMessage()    {}
func (*CheckPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_30a908b65ec6aa42, []int{5}
}
func (m *CheckPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckPoint.Merge(m, src)
}
func (m *CheckPoint) XXX_Size() int {
	return m.Size()
}
func (m *CheckPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckPoint.DiscardUnknown(m)
}

var xxx_messageInfo_CheckPoint proto.InternalMessageInfo

func (m *CheckPoint) GetSseq() uint64 {
	if m != nil {
		return m.Sseq
	}
	return 0
}

func (m *CheckPoint) GetCseq() uint64 {
	if m != nil {
		return m.Cseq
	}
	return 0
}

type NotificationPushPull struct {
	CUID                 string   `protobuf:"bytes,1,opt,name=CUID,proto3" json:"CUID,omitempty"`
	DUID                 string   `protobuf:"bytes,2,opt,name=DUID,proto3" json:"DUID,omitempty"`
	Sseq                 uint64   `protobuf:"varint,3,opt,name=sseq,proto3" json:"sseq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotificationPushPull) Reset()         { *m = NotificationPushPull{} }
func (m *NotificationPushPull) String() string { return proto.CompactTextString(m) }
func (*NotificationPushPull) ProtoMessage()    {}
func (*NotificationPushPull) Descriptor() ([]byte, []int) {
	return fileDescriptor_30a908b65ec6aa42, []int{6}
}
func (m *NotificationPushPull) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotificationPushPull) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotificationPushPull.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotificationPushPull) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationPushPull.Merge(m, src)
}
func (m *NotificationPushPull) XXX_Size() int {
	return m.Size()
}
func (m *NotificationPushPull) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationPushPull.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationPushPull proto.InternalMessageInfo

func (m *NotificationPushPull) GetCUID() string {
	if m != nil {
		return m.CUID
	}
	return ""
}

func (m *NotificationPushPull) GetDUID() string {
	if m != nil {
		return m.DUID
	}
	return ""
}

func (m *NotificationPushPull) GetSseq() uint64 {
	if m != nil {
		return m.Sseq
	}
	return 0
}

type DatatypeMeta struct {
	Key                  string          `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	DUID                 []byte          `protobuf:"bytes,2,opt,name=DUID,proto3" json:"DUID,omitempty"`
	OpID                 *OperationID    `protobuf:"bytes,3,opt,name=opID,proto3" json:"opID,omitempty"`
	TypeOf               TypeOfDatatype  `protobuf:"varint,4,opt,name=typeOf,proto3,enum=ortoo.TypeOfDatatype" json:"typeOf,omitempty"`
	State                StateOfDatatype `protobuf:"varint,5,opt,name=state,proto3,enum=ortoo.StateOfDatatype" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DatatypeMeta) Reset()         { *m = DatatypeMeta{} }
func (m *DatatypeMeta) String() string { return proto.CompactTextString(m) }
func (*DatatypeMeta) ProtoMessage()    {}
func (*DatatypeMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_30a908b65ec6aa42, []int{7}
}
func (m *DatatypeMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatatypeMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DatatypeMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DatatypeMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatatypeMeta.Merge(m, src)
}
func (m *DatatypeMeta) XXX_Size() int {
	return m.Size()
}
func (m *DatatypeMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_DatatypeMeta.DiscardUnknown(m)
}

var xxx_messageInfo_DatatypeMeta proto.InternalMessageInfo

func (m *DatatypeMeta) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DatatypeMeta) GetDUID() []byte {
	if m != nil {
		return m.DUID
	}
	return nil
}

func (m *DatatypeMeta) GetOpID() *OperationID {
	if m != nil {
		return m.OpID
	}
	return nil
}

func (m *DatatypeMeta) GetTypeOf() TypeOfDatatype {
	if m != nil {
		return m.TypeOf
	}
	return TypeOfDatatype_COUNTER
}

func (m *DatatypeMeta) GetState() StateOfDatatype {
	if m != nil {
		return m.State
	}
	return StateOfDatatype_DUE_TO_CREATE
}

type ResponseState struct {
	State                StateOfResponse `protobuf:"varint,1,opt,name=state,proto3,enum=ortoo.StateOfResponse" json:"state,omitempty"`
	Msg                  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResponseState) Reset()         { *m = ResponseState{} }
func (m *ResponseState) String() string { return proto.CompactTextString(m) }
func (*ResponseState) ProtoMessage()    {}
func (*ResponseState) Descriptor() ([]byte, []int) {
	return fileDescriptor_30a908b65ec6aa42, []int{8}
}
func (m *ResponseState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseState.Merge(m, src)
}
func (m *ResponseState) XXX_Size() int {
	return m.Size()
}
func (m *ResponseState) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseState.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseState proto.InternalMessageInfo

func (m *ResponseState) GetState() StateOfResponse {
	if m != nil {
		return m.State
	}
	return StateOfResponse_OK
}

func (m *ResponseState) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type Header struct {
	Version              string      `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Collection           string      `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
	Cuid                 []byte      `protobuf:"bytes,3,opt,name=cuid,proto3" json:"cuid,omitempty"`
	ClientAlias          string      `protobuf:"bytes,4,opt,name=clientAlias,proto3" json:"clientAlias,omitempty"`
	Type                 RequestType `protobuf:"varint,5,opt,name=type,proto3,enum=ortoo.RequestType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_30a908b65ec6aa42, []int{9}
}
func (m *Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return m.Size()
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

func (m *Header) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Header) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *Header) GetCuid() []byte {
	if m != nil {
		return m.Cuid
	}
	return nil
}

func (m *Header) GetClientAlias() string {
	if m != nil {
		return m.ClientAlias
	}
	return ""
}

func (m *Header) GetType() RequestType {
	if m != nil {
		return m.Type
	}
	return RequestType_CLIENTS
}

type ClientRequest struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	SyncType             SyncType `protobuf:"varint,2,opt,name=syncType,proto3,enum=ortoo.SyncType" json:"syncType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientRequest) Reset()         { *m = ClientRequest{} }
func (m *ClientRequest) String() string { return proto.CompactTextString(m) }
func (*ClientRequest) ProtoMessage()    {}
func (*ClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30a908b65ec6aa42, []int{10}
}
func (m *ClientRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRequest.Merge(m, src)
}
func (m *ClientRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRequest proto.InternalMessageInfo

func (m *ClientRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ClientRequest) GetSyncType() SyncType {
	if m != nil {
		return m.SyncType
	}
	return SyncType_LOCAL_ONLY
}

type ClientResponse struct {
	Header               *Header        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	State                *ResponseState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ClientResponse) Reset()         { *m = ClientResponse{} }
func (m *ClientResponse) String() string { return proto.CompactTextString(m) }
func (*ClientResponse) ProtoMessage()    {}
func (*ClientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30a908b65ec6aa42, []int{11}
}
func (m *ClientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientResponse.Merge(m, src)
}
func (m *ClientResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClientResponse proto.InternalMessageInfo

func (m *ClientResponse) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ClientResponse) GetState() *ResponseState {
	if m != nil {
		return m.State
	}
	return nil
}

type PushPullRequest struct {
	Header               *Header         `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	PushPullPacks        []*PushPullPack `protobuf:"bytes,2,rep,name=PushPullPacks,proto3" json:"PushPullPacks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PushPullRequest) Reset()         { *m = PushPullRequest{} }
func (m *PushPullRequest) String() string { return proto.CompactTextString(m) }
func (*PushPullRequest) ProtoMessage()    {}
func (*PushPullRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30a908b65ec6aa42, []int{12}
}
func (m *PushPullRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushPullRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushPullRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushPullRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushPullRequest.Merge(m, src)
}
func (m *PushPullRequest) XXX_Size() int {
	return m.Size()
}
func (m *PushPullRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PushPullRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PushPullRequest proto.InternalMessageInfo

func (m *PushPullRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PushPullRequest) GetPushPullPacks() []*PushPullPack {
	if m != nil {
		return m.PushPullPacks
	}
	return nil
}

type PushPullResponse struct {
	Header               *Header         `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	PushPullPacks        []*PushPullPack `protobuf:"bytes,2,rep,name=PushPullPacks,proto3" json:"PushPullPacks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PushPullResponse) Reset()         { *m = PushPullResponse{} }
func (m *PushPullResponse) String() string { return proto.CompactTextString(m) }
func (*PushPullResponse) ProtoMessage()    {}
func (*PushPullResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30a908b65ec6aa42, []int{13}
}
func (m *PushPullResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushPullResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushPullResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushPullResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushPullResponse.Merge(m, src)
}
func (m *PushPullResponse) XXX_Size() int {
	return m.Size()
}
func (m *PushPullResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PushPullResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PushPullResponse proto.InternalMessageInfo

func (m *PushPullResponse) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PushPullResponse) GetPushPullPacks() []*PushPullPack {
	if m != nil {
		return m.PushPullPacks
	}
	return nil
}

type CollectionMessage struct {
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Collection           string   `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectionMessage) Reset()         { *m = CollectionMessage{} }
func (m *CollectionMessage) String() string { return proto.CompactTextString(m) }
func (*CollectionMessage) ProtoMessage()    {}
func (*CollectionMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_30a908b65ec6aa42, []int{14}
}
func (m *CollectionMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectionMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectionMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectionMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionMessage.Merge(m, src)
}
func (m *CollectionMessage) XXX_Size() int {
	return m.Size()
}
func (m *CollectionMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionMessage proto.InternalMessageInfo

func (m *CollectionMessage) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *CollectionMessage) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func init() {
	proto.RegisterType((*Client)(nil), "ortoo.Client")
	proto.RegisterType((*Timestamp)(nil), "ortoo.Timestamp")
	proto.RegisterType((*OperationID)(nil), "ortoo.OperationID")
	proto.RegisterType((*Operation)(nil), "ortoo.Operation")
	proto.RegisterType((*PushPullPack)(nil), "ortoo.PushPullPack")
	proto.RegisterType((*CheckPoint)(nil), "ortoo.CheckPoint")
	proto.RegisterType((*NotificationPushPull)(nil), "ortoo.NotificationPushPull")
	proto.RegisterType((*DatatypeMeta)(nil), "ortoo.DatatypeMeta")
	proto.RegisterType((*ResponseState)(nil), "ortoo.ResponseState")
	proto.RegisterType((*Header)(nil), "ortoo.Header")
	proto.RegisterType((*ClientRequest)(nil), "ortoo.ClientRequest")
	proto.RegisterType((*ClientResponse)(nil), "ortoo.ClientResponse")
	proto.RegisterType((*PushPullRequest)(nil), "ortoo.PushPullRequest")
	proto.RegisterType((*PushPullResponse)(nil), "ortoo.PushPullResponse")
	proto.RegisterType((*CollectionMessage)(nil), "ortoo.CollectionMessage")
}

func init() { proto.RegisterFile("ortoo.proto", fileDescriptor_30a908b65ec6aa42) }

var fileDescriptor_30a908b65ec6aa42 = []byte{
	// 739 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0xee, 0x3a, 0x8e, 0xf3, 0x66, 0xd2, 0xb4, 0xe9, 0xbe, 0xa1, 0x0a, 0xa8, 0x8a, 0x22, 0x4b,
	0xa0, 0x88, 0x8f, 0xa8, 0x84, 0x13, 0x82, 0x0b, 0x4d, 0x0e, 0xf4, 0x50, 0x1a, 0x6d, 0x0b, 0x07,
	0x6e, 0xae, 0xb3, 0x4d, 0xad, 0xda, 0x59, 0xd7, 0xbb, 0x41, 0xca, 0x89, 0xbf, 0xc1, 0x91, 0xbf,
	0xc1, 0x3f, 0xe0, 0xc8, 0x8d, 0x2b, 0x2a, 0x7f, 0x04, 0xed, 0x97, 0xed, 0x94, 0x4a, 0x50, 0xe0,
	0x36, 0x1f, 0xcf, 0xe6, 0x99, 0x79, 0x66, 0x3c, 0x81, 0x06, 0xcb, 0x04, 0x63, 0x83, 0x34, 0x63,
	0x82, 0xe1, 0xaa, 0x72, 0xee, 0xb4, 0x74, 0x8c, 0xce, 0x17, 0x89, 0x4e, 0xf8, 0xef, 0xc1, 0x1b,
	0xc5, 0x11, 0x9d, 0x0b, 0x8c, 0xc1, 0x1d, 0xbd, 0xde, 0x1f, 0x77, 0x50, 0x0f, 0xf5, 0xd7, 0x89,
	0xb2, 0x71, 0x1b, 0xaa, 0x41, 0x1c, 0x05, 0xbc, 0xe3, 0xf4, 0x50, 0xbf, 0x4e, 0xb4, 0x83, 0xbb,
	0x00, 0x21, 0x8b, 0x63, 0x1a, 0x8a, 0x88, 0xcd, 0x3b, 0x15, 0x95, 0x2a, 0x45, 0xf0, 0x03, 0xf8,
	0x8f, 0x2f, 0xe7, 0xe1, 0xf1, 0x32, 0xa5, 0x1d, 0xb7, 0x87, 0xfa, 0x1b, 0xc3, 0xcd, 0x81, 0x26,
	0x3e, 0x32, 0x61, 0x92, 0x03, 0xfc, 0x04, 0xea, 0xc7, 0x51, 0x42, 0xb9, 0x08, 0x92, 0x14, 0xb7,
	0xa0, 0x42, 0xb3, 0x40, 0x95, 0xd0, 0x24, 0xd2, 0xc4, 0x3b, 0x50, 0x8b, 0x83, 0x24, 0x65, 0x99,
	0x50, 0x35, 0xb8, 0x7b, 0xce, 0x2e, 0x22, 0x36, 0x94, 0xd7, 0x5c, 0x29, 0xd5, 0xbc, 0x03, 0xf5,
	0x29, 0x8d, 0xa3, 0x24, 0x12, 0x34, 0x53, 0xf4, 0x4d, 0x52, 0x04, 0xfc, 0x19, 0x34, 0x0e, 0x53,
	0x9a, 0x05, 0xb2, 0xd0, 0xfd, 0xf1, 0x3f, 0x21, 0x6c, 0x43, 0x85, 0xd3, 0x0b, 0x45, 0xa5, 0xd1,
	0xd2, 0xf5, 0x39, 0xd4, 0x73, 0x22, 0xec, 0x83, 0x63, 0x94, 0x6d, 0x0c, 0xb1, 0xd1, 0xa2, 0x54,
	0x06, 0x71, 0xf6, 0xc7, 0x78, 0x00, 0x1e, 0x4b, 0x95, 0x66, 0x8e, 0xd2, 0x6c, 0xdb, 0xe0, 0x64,
	0xe8, 0xf0, 0x34, 0x47, 0x13, 0x83, 0x92, 0xa5, 0x9c, 0xb0, 0xe9, 0xd2, 0x96, 0x22, 0x6d, 0xff,
	0x2b, 0x82, 0xf5, 0xc9, 0x82, 0x9f, 0x4d, 0x16, 0x71, 0x3c, 0x09, 0xc2, 0x73, 0x09, 0x1a, 0x97,
	0x86, 0x2a, 0x6d, 0xd9, 0xf3, 0x39, 0x5d, 0x9a, 0x91, 0x4a, 0x13, 0x6f, 0x4b, 0xea, 0x7c, 0x98,
	0x35, 0x62, 0x3c, 0xfc, 0x18, 0x20, 0x3c, 0xa3, 0xe1, 0xf9, 0x84, 0x45, 0x73, 0xa1, 0x1a, 0x6c,
	0x0c, 0xb7, 0x4c, 0x59, 0xa3, 0x3c, 0x41, 0x4a, 0x20, 0x2b, 0x68, 0xb5, 0x10, 0x14, 0x83, 0x2b,
	0x64, 0x57, 0x5e, 0x0f, 0xf5, 0xab, 0x44, 0xd9, 0x78, 0x17, 0x80, 0xd9, 0x86, 0x78, 0xa7, 0xd6,
	0xab, 0xf4, 0x1b, 0xc3, 0xd6, 0x55, 0x5d, 0x48, 0x09, 0xe3, 0x3f, 0x07, 0x28, 0x18, 0xf1, 0x36,
	0xb8, 0x5c, 0x6a, 0x8e, 0x72, 0xcd, 0x95, 0x2f, 0xe3, 0xa1, 0x8c, 0x17, 0x93, 0x53, 0xbe, 0xff,
	0x06, 0xda, 0xaf, 0x98, 0x88, 0x4e, 0xa3, 0x50, 0xfd, 0x9c, 0x95, 0x68, 0x65, 0xe7, 0xeb, 0x66,
	0x9c, 0x56, 0x32, 0xad, 0x8f, 0x96, 0xcc, 0xf2, 0x55, 0x56, 0xf9, 0xfc, 0x4f, 0x08, 0xd6, 0xc7,
	0x81, 0x08, 0x64, 0x53, 0x07, 0x54, 0x04, 0x56, 0x5b, 0x54, 0x68, 0x5b, 0xfe, 0x39, 0x3b, 0x81,
	0x7b, 0xe0, 0xb2, 0xd4, 0x6c, 0xd1, 0xf5, 0x0b, 0xa1, 0xf2, 0xf8, 0x11, 0x78, 0x42, 0x4d, 0xdf,
	0x7c, 0x46, 0xb7, 0x56, 0x56, 0xc2, 0x12, 0x13, 0x03, 0xc2, 0x0f, 0xa1, 0xca, 0x45, 0x20, 0xa8,
	0x52, 0xbf, 0x58, 0xa0, 0x23, 0x19, 0x2b, 0xc1, 0x35, 0xc8, 0x3f, 0x84, 0x26, 0xa1, 0x3c, 0x65,
	0x73, 0x4e, 0x15, 0xa2, 0x78, 0x8e, 0xae, 0x7b, 0x6e, 0xb1, 0xe6, 0xb9, 0xec, 0x34, 0xe1, 0x33,
	0xbb, 0x45, 0x09, 0x9f, 0xf9, 0x1f, 0x11, 0x78, 0x2f, 0x69, 0x30, 0xa5, 0x19, 0xee, 0x40, 0xed,
	0x1d, 0xcd, 0xb8, 0xdc, 0x28, 0x2d, 0x85, 0x75, 0xaf, 0xdc, 0x0e, 0xe7, 0xa7, 0xdb, 0x81, 0xc1,
	0x0d, 0x17, 0xd1, 0xd4, 0x6e, 0xb5, 0xb4, 0x71, 0x0f, 0x1a, 0xa1, 0xba, 0x51, 0x2f, 0xd4, 0x2d,
	0x72, 0xd5, 0xa3, 0x72, 0x48, 0x0a, 0xaa, 0x76, 0x4c, 0x37, 0x6e, 0x05, 0x25, 0xf4, 0x62, 0x41,
	0xb9, 0x50, 0x07, 0x47, 0xe5, 0xfd, 0x10, 0x9a, 0xfa, 0xda, 0x99, 0x14, 0xbe, 0x0b, 0xde, 0x99,
	0x2a, 0xd9, 0x7c, 0x9c, 0x4d, 0xf3, 0x54, 0xf7, 0x41, 0x4c, 0x72, 0xe5, 0xa2, 0x39, 0xbf, 0xba,
	0x68, 0x21, 0x6c, 0x58, 0x12, 0x2d, 0xd9, 0xef, 0xb2, 0xdc, 0xb7, 0x03, 0x70, 0x14, 0xaa, 0x9d,
	0xb7, 0x51, 0x9a, 0x92, 0x9d, 0x1e, 0x87, 0x4d, 0xbb, 0xc5, 0x37, 0xec, 0xe5, 0x29, 0x34, 0xcb,
	0x27, 0x42, 0xde, 0x76, 0xf9, 0xf9, 0xfd, 0x6f, 0xd0, 0xe5, 0x1c, 0x59, 0x45, 0xfa, 0x02, 0x5a,
	0x05, 0xe9, 0xcd, 0x7a, 0xfb, 0x0b, 0xd6, 0x03, 0xd8, 0x1a, 0xe5, 0x0b, 0x72, 0x40, 0x39, 0x0f,
	0x66, 0xf4, 0xcf, 0x37, 0x6c, 0xef, 0xf6, 0xe7, 0xcb, 0x2e, 0xfa, 0x72, 0xd9, 0x45, 0xdf, 0x2e,
	0xbb, 0xe8, 0xc3, 0xf7, 0xee, 0xda, 0xdb, 0xda, 0xe0, 0x59, 0xc2, 0xa6, 0x34, 0x9e, 0xac, 0x9d,
	0x78, 0xea, 0x5f, 0xf1, 0xc9, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x92, 0x66, 0xc0, 0x21, 0x3d,
	0x07, 0x00, 0x00,
}

func (m *Client) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Client) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Client) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SyncType != 0 {
		i = encodeVarintOrtoo(dAtA, i, uint64(m.SyncType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Collection) > 0 {
		i -= len(m.Collection)
		copy(dAtA[i:], m.Collection)
		i = encodeVarintOrtoo(dAtA, i, uint64(len(m.Collection)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintOrtoo(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CUID) > 0 {
		i -= len(m.CUID)
		copy(dAtA[i:], m.CUID)
		i = encodeVarintOrtoo(dAtA, i, uint64(len(m.CUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Timestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Timestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Timestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Delimiter != 0 {
		i = encodeVarintOrtoo(dAtA, i, uint64(m.Delimiter))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CUID) > 0 {
		i -= len(m.CUID)
		copy(dAtA[i:], m.CUID)
		i = encodeVarintOrtoo(dAtA, i, uint64(len(m.CUID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Lamport != 0 {
		i = encodeVarintOrtoo(dAtA, i, uint64(m.Lamport))
		i--
		dAtA[i] = 0x10
	}
	if m.Era != 0 {
		i = encodeVarintOrtoo(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OperationID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Seq != 0 {
		i = encodeVarintOrtoo(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CUID) > 0 {
		i -= len(m.CUID)
		copy(dAtA[i:], m.CUID)
		i = encodeVarintOrtoo(dAtA, i, uint64(len(m.CUID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Lamport != 0 {
		i = encodeVarintOrtoo(dAtA, i, uint64(m.Lamport))
		i--
		dAtA[i] = 0x10
	}
	if m.Era != 0 {
		i = encodeVarintOrtoo(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Operation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintOrtoo(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OpType != 0 {
		i = encodeVarintOrtoo(dAtA, i, uint64(m.OpType))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrtoo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushPullPack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushPullPack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushPullPack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Operations) > 0 {
		for iNdEx := len(m.Operations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Operations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrtoo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Type != 0 {
		i = encodeVarintOrtoo(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x30
	}
	if m.Era != 0 {
		i = encodeVarintOrtoo(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x28
	}
	if m.CheckPoint != nil {
		{
			size, err := m.CheckPoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrtoo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Option != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Option))
		i--
		dAtA[i] = 0x1d
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintOrtoo(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DUID) > 0 {
		i -= len(m.DUID)
		copy(dAtA[i:], m.DUID)
		i = encodeVarintOrtoo(dAtA, i, uint64(len(m.DUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cseq != 0 {
		i = encodeVarintOrtoo(dAtA, i, uint64(m.Cseq))
		i--
		dAtA[i] = 0x10
	}
	if m.Sseq != 0 {
		i = encodeVarintOrtoo(dAtA, i, uint64(m.Sseq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotificationPushPull) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotificationPushPull) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotificationPushPull) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sseq != 0 {
		i = encodeVarintOrtoo(dAtA, i, uint64(m.Sseq))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DUID) > 0 {
		i -= len(m.DUID)
		copy(dAtA[i:], m.DUID)
		i = encodeVarintOrtoo(dAtA, i, uint64(len(m.DUID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CUID) > 0 {
		i -= len(m.CUID)
		copy(dAtA[i:], m.CUID)
		i = encodeVarintOrtoo(dAtA, i, uint64(len(m.CUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DatatypeMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatatypeMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatatypeMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintOrtoo(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if m.TypeOf != 0 {
		i = encodeVarintOrtoo(dAtA, i, uint64(m.TypeOf))
		i--
		dAtA[i] = 0x20
	}
	if m.OpID != nil {
		{
			size, err := m.OpID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrtoo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DUID) > 0 {
		i -= len(m.DUID)
		copy(dAtA[i:], m.DUID)
		i = encodeVarintOrtoo(dAtA, i, uint64(len(m.DUID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintOrtoo(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintOrtoo(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.State != 0 {
		i = encodeVarintOrtoo(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintOrtoo(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ClientAlias) > 0 {
		i -= len(m.ClientAlias)
		copy(dAtA[i:], m.ClientAlias)
		i = encodeVarintOrtoo(dAtA, i, uint64(len(m.ClientAlias)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Cuid) > 0 {
		i -= len(m.Cuid)
		copy(dAtA[i:], m.Cuid)
		i = encodeVarintOrtoo(dAtA, i, uint64(len(m.Cuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Collection) > 0 {
		i -= len(m.Collection)
		copy(dAtA[i:], m.Collection)
		i = encodeVarintOrtoo(dAtA, i, uint64(len(m.Collection)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintOrtoo(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SyncType != 0 {
		i = encodeVarintOrtoo(dAtA, i, uint64(m.SyncType))
		i--
		dAtA[i] = 0x10
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrtoo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrtoo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrtoo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushPullRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushPullRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushPullRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PushPullPacks) > 0 {
		for iNdEx := len(m.PushPullPacks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PushPullPacks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrtoo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrtoo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushPullResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushPullResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushPullResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PushPullPacks) > 0 {
		for iNdEx := len(m.PushPullPacks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PushPullPacks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrtoo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrtoo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CollectionMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectionMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Collection) > 0 {
		i -= len(m.Collection)
		copy(dAtA[i:], m.Collection)
		i = encodeVarintOrtoo(dAtA, i, uint64(len(m.Collection)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintOrtoo(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrtoo(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrtoo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Client) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CUID)
	if l > 0 {
		n += 1 + l + sovOrtoo(uint64(l))
	}
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovOrtoo(uint64(l))
	}
	l = len(m.Collection)
	if l > 0 {
		n += 1 + l + sovOrtoo(uint64(l))
	}
	if m.SyncType != 0 {
		n += 1 + sovOrtoo(uint64(m.SyncType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Timestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovOrtoo(uint64(m.Era))
	}
	if m.Lamport != 0 {
		n += 1 + sovOrtoo(uint64(m.Lamport))
	}
	l = len(m.CUID)
	if l > 0 {
		n += 1 + l + sovOrtoo(uint64(l))
	}
	if m.Delimiter != 0 {
		n += 1 + sovOrtoo(uint64(m.Delimiter))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperationID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovOrtoo(uint64(m.Era))
	}
	if m.Lamport != 0 {
		n += 1 + sovOrtoo(uint64(m.Lamport))
	}
	l = len(m.CUID)
	if l > 0 {
		n += 1 + l + sovOrtoo(uint64(l))
	}
	if m.Seq != 0 {
		n += 1 + sovOrtoo(uint64(m.Seq))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Operation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovOrtoo(uint64(l))
	}
	if m.OpType != 0 {
		n += 1 + sovOrtoo(uint64(m.OpType))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovOrtoo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushPullPack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DUID)
	if l > 0 {
		n += 1 + l + sovOrtoo(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovOrtoo(uint64(l))
	}
	if m.Option != 0 {
		n += 5
	}
	if m.CheckPoint != nil {
		l = m.CheckPoint.Size()
		n += 1 + l + sovOrtoo(uint64(l))
	}
	if m.Era != 0 {
		n += 1 + sovOrtoo(uint64(m.Era))
	}
	if m.Type != 0 {
		n += 1 + sovOrtoo(uint64(m.Type))
	}
	if len(m.Operations) > 0 {
		for _, e := range m.Operations {
			l = e.Size()
			n += 1 + l + sovOrtoo(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sseq != 0 {
		n += 1 + sovOrtoo(uint64(m.Sseq))
	}
	if m.Cseq != 0 {
		n += 1 + sovOrtoo(uint64(m.Cseq))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotificationPushPull) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CUID)
	if l > 0 {
		n += 1 + l + sovOrtoo(uint64(l))
	}
	l = len(m.DUID)
	if l > 0 {
		n += 1 + l + sovOrtoo(uint64(l))
	}
	if m.Sseq != 0 {
		n += 1 + sovOrtoo(uint64(m.Sseq))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DatatypeMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovOrtoo(uint64(l))
	}
	l = len(m.DUID)
	if l > 0 {
		n += 1 + l + sovOrtoo(uint64(l))
	}
	if m.OpID != nil {
		l = m.OpID.Size()
		n += 1 + l + sovOrtoo(uint64(l))
	}
	if m.TypeOf != 0 {
		n += 1 + sovOrtoo(uint64(m.TypeOf))
	}
	if m.State != 0 {
		n += 1 + sovOrtoo(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovOrtoo(uint64(m.State))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovOrtoo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovOrtoo(uint64(l))
	}
	l = len(m.Collection)
	if l > 0 {
		n += 1 + l + sovOrtoo(uint64(l))
	}
	l = len(m.Cuid)
	if l > 0 {
		n += 1 + l + sovOrtoo(uint64(l))
	}
	l = len(m.ClientAlias)
	if l > 0 {
		n += 1 + l + sovOrtoo(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovOrtoo(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOrtoo(uint64(l))
	}
	if m.SyncType != 0 {
		n += 1 + sovOrtoo(uint64(m.SyncType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOrtoo(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovOrtoo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushPullRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOrtoo(uint64(l))
	}
	if len(m.PushPullPacks) > 0 {
		for _, e := range m.PushPullPacks {
			l = e.Size()
			n += 1 + l + sovOrtoo(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushPullResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOrtoo(uint64(l))
	}
	if len(m.PushPullPacks) > 0 {
		for _, e := range m.PushPullPacks {
			l = e.Size()
			n += 1 + l + sovOrtoo(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CollectionMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovOrtoo(uint64(l))
	}
	l = len(m.Collection)
	if l > 0 {
		n += 1 + l + sovOrtoo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOrtoo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrtoo(x uint64) (n int) {
	return sovOrtoo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Client) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrtoo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Client: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Client: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CUID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CUID = append(m.CUID[:0], dAtA[iNdEx:postIndex]...)
			if m.CUID == nil {
				m.CUID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collection = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncType", wireType)
			}
			m.SyncType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncType |= SyncType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrtoo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Timestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrtoo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Timestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Timestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lamport", wireType)
			}
			m.Lamport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lamport |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CUID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CUID = append(m.CUID[:0], dAtA[iNdEx:postIndex]...)
			if m.CUID == nil {
				m.CUID = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delimiter", wireType)
			}
			m.Delimiter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delimiter |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrtoo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrtoo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lamport", wireType)
			}
			m.Lamport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lamport |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CUID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CUID = append(m.CUID[:0], dAtA[iNdEx:postIndex]...)
			if m.CUID == nil {
				m.CUID = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrtoo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrtoo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &OperationID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			m.OpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpType |= TypeOfOperation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrtoo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushPullPack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrtoo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushPullPack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushPullPack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DUID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DUID = append(m.DUID[:0], dAtA[iNdEx:postIndex]...)
			if m.DUID == nil {
				m.DUID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			m.Option = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Option = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CheckPoint == nil {
				m.CheckPoint = &CheckPoint{}
			}
			if err := m.CheckPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operations = append(m.Operations, &Operation{})
			if err := m.Operations[len(m.Operations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrtoo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrtoo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sseq", wireType)
			}
			m.Sseq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sseq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cseq", wireType)
			}
			m.Cseq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cseq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrtoo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotificationPushPull) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrtoo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotificationPushPull: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotificationPushPull: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sseq", wireType)
			}
			m.Sseq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sseq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrtoo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DatatypeMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrtoo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatatypeMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatatypeMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DUID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DUID = append(m.DUID[:0], dAtA[iNdEx:postIndex]...)
			if m.DUID == nil {
				m.DUID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OpID == nil {
				m.OpID = &OperationID{}
			}
			if err := m.OpID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeOf", wireType)
			}
			m.TypeOf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeOf |= TypeOfDatatype(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= StateOfDatatype(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrtoo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrtoo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= StateOfResponse(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrtoo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrtoo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collection = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cuid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cuid = append(m.Cuid[:0], dAtA[iNdEx:postIndex]...)
			if m.Cuid == nil {
				m.Cuid = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAlias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientAlias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RequestType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrtoo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrtoo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncType", wireType)
			}
			m.SyncType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncType |= SyncType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrtoo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrtoo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &ResponseState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrtoo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushPullRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrtoo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushPullRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushPullRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushPullPacks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushPullPacks = append(m.PushPullPacks, &PushPullPack{})
			if err := m.PushPullPacks[len(m.PushPullPacks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrtoo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushPullResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrtoo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushPullResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushPullResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushPullPacks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushPullPacks = append(m.PushPullPacks, &PushPullPack{})
			if err := m.PushPullPacks[len(m.PushPullPacks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrtoo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrtoo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrtoo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrtoo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collection = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrtoo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrtoo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrtoo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrtoo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrtoo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrtoo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrtoo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrtoo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrtoo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrtoo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrtoo = fmt.Errorf("proto: unexpected end of group")
)
